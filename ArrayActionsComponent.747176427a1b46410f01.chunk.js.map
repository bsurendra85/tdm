{"version":3,"sources":["./src/demo/modules/@forms/tutorials/17-array-actions/__tdm-code__.ts"],"names":["module","exports","file","lang","section","code","title"],"mappings":"sCAAAA,EAAAC,UAAmBC,KAAA,YAAAC,KAAA,KAAAC,QAAA,QAAAC,KAAA,myQAAm/QH,KAAA,YAAAC,KAAA,KAAAC,QAAA,QAAAC,KAAA,mgBAA2jBH,KAAA,YAAAC,KAAA,KAAAC,QAAA,QAAAC,KAAA,2fAAmjBH,KAAA,YAAAC,KAAA,KAAAC,QAAA,QAAAC,KAAA,+iOAAuuOH,KAAA,YAAAC,KAAA,KAAAC,QAAA,QAAAC,KAAA,oNAA4QH,KAAA,6BAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,mqFAAgyFC,MAAA,cAA0BJ,KAAA,+BAAAC,KAAA,OAAAC,QAAA,UAAAC,KAAA,okDAAwtDC,MAAA,aAA8BJ,KAAA,+BAAAC,KAAA,OAAAC,QAAA,UAAAC,KAAA,GAAAC,MAAA,UAAoGJ,KAAA,WAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,2sLAAo0LC,MAAA","file":"ArrayActionsComponent.747176427a1b46410f01.chunk.js","sourcesContent":["module.exports = [{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"part1\",\"code\":\"<p>In the UI, when a list is shown inside a form it is used as an interface\\nfor the user to do 1 or more of the following actions:</p>\\n<ol>\\n<li>Edit list items <strong>inline</strong>  </li>\\n<li>Edit list items <strong>externally</strong>  </li>\\n<li>Add / Remove / Move item&#39;s in the list</li>\\n</ol>\\n<p>If it does none of the above it&#39;s simply a read-only list.</p>\\n<p>Editing inline (1) is supported by default, editing externally (2)\\nand modifying the array (3) is not.</p>\\n<p>These features require user actions, the user needs to interact with\\nelements in the UI to trigger editing, removing, adding, etc...</p>\\n<p>The renderer can handle this task, it knows when it is an array and\\nit can show buttons or any other UI of choice and handle logic internally.</p>\\n<p>But there is a problem, the renderer can do all of the above but it\\ncan not apply the logic for the action itself, it does not know about\\nthe context, business logic and other stuff required.</p>\\n<p>Moreover, the renderer has no direct connection to the host of the\\ndynamic form running it so it.</p>\\n<p>Let&#39;s demonstrate using a user story:</p>\\n<ul>\\n<li>A component is showing a page</li>\\n<li>The page has a dynamic form</li>\\n<li>The form has a renderer</li>\\n<li>The renderer shows a <strong>delete</strong> button</li>\\n<li>The user clicked the <strong>delete</strong> button</li>\\n<li>The renderer should notify the page component about it.</li>\\n</ul>\\n<p>Using a service injected to the renderer won&#39;t work, it will be very\\nhard to identify the source when using multiple forms on the same page\\nand will also require a lot of setup for each form.</p>\\n<p>To allow that communication, the dynamic form provides an API for array\\nactions, an internal API for the renderer to notify the dynamic form and\\nan external API (<code>@Output</code>) so the host can listen to array action\\nnotifications.</p>\\n<h2><a id=\\\"host-facing-api\\\" class=\\\"anchor\\\" href=\\\"#host-facing-api\\\"><span class=\\\"header-link\\\"></span></a>Host facing API</h2><p>The host component (e.g. page) only needs to register for notifications:</p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\">  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dynamic-form</span> [<span class=\\\"hljs-attr\\\">model</span>]=<span class=\\\"hljs-string\\\">\\\"model\\\"</span>\\n                (<span class=\\\"hljs-attr\\\">arrayActionRequest</span>)=<span class=\\\"hljs-string\\\">\\\"onArrayActionRequest($event)\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dynamic-form</span>&gt;</span>\\n</code></pre>\\n<p>And in the component:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\">  onArrayActionRequest(event: ArrayActionRequestEvent): <span class=\\\"hljs-built_in\\\">void</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'add'</span> ) {\\n      <span class=\\\"hljs-comment\\\">/* HANDLE ADD EVENT */</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'remove'</span> ) {\\n      <span class=\\\"hljs-comment\\\">/* HANDLE REMOVE EVENT */</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'move'</span> ) {\\n      <span class=\\\"hljs-comment\\\">/* HANDLE MOVE EVENT */</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'edit'</span> ) {\\n      <span class=\\\"hljs-comment\\\">/* HANDLE EDIT EVENT */</span>\\n    }\\n  }\\n</code></pre>\\n<div class=\\\"alert\\\">\\n  Working with complex data structures require interaction with the\\n  form, especially when adding form controls that does not exist.\\n  <br>\\n  A good example is adding a new item to a <code>FormArray</code> or assigning a\\n  new value to a child form.\\n  <br>\\n  The library provide tools for these kind of interactions. Because\\n  this chapter is focused on the renderer we will not cover that.\\n</div>\\n\\n<h2><a id=\\\"renderer-facing-api\\\" class=\\\"anchor\\\" href=\\\"#renderer-facing-api\\\"><span class=\\\"header-link\\\"></span></a>Renderer facing API</h2><p>The renderer use&#39;s the <code>emitArrayActionRequest</code> method on the dynamic\\nform instance. The method accepts an object describing the action and\\nit will extend that action and notify the host.</p>\\n<p>The event object sent to the host is <code>ArrayActionRequestEvent</code> which is\\nan union type of the following:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">interface</span> ArrayActionMoveRequestEvent <span class=\\\"hljs-keyword\\\">extends</span> ArrayActionRequest {\\n  action: <span class=\\\"hljs-string\\\">'move'</span>;\\n  fromIdx: <span class=\\\"hljs-built_in\\\">number</span>;\\n  toIdx: <span class=\\\"hljs-built_in\\\">number</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">interface</span> ArrayActionAddRequestEvent <span class=\\\"hljs-keyword\\\">extends</span> ArrayActionRequest {\\n  action: <span class=\\\"hljs-string\\\">'add'</span>;\\n  atIdx?: <span class=\\\"hljs-built_in\\\">number</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">interface</span> ArrayActionRemoveRequestEvent <span class=\\\"hljs-keyword\\\">extends</span> ArrayActionRequest {\\n  action: <span class=\\\"hljs-string\\\">'remove'</span>;\\n  atIdx: <span class=\\\"hljs-built_in\\\">number</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">interface</span> ArrayActionEditRequestEvent <span class=\\\"hljs-keyword\\\">extends</span> ArrayActionRequest {\\n  action: <span class=\\\"hljs-string\\\">'edit'</span>;\\n  atIdx: <span class=\\\"hljs-built_in\\\">number</span>;\\n}\\n</code></pre>\\n<p>And <code>ArrayActionRequest</code>:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">interface</span> ArrayActionRequest {\\n  renderInstruction: RenderInstruction;\\n  formArray: FormArray;\\n  fullName: <span class=\\\"hljs-built_in\\\">string</span>;\\n  runtimePath: <span class=\\\"hljs-built_in\\\">string</span>;\\n  tdmForm: TDMModelForm;\\n  data?: <span class=\\\"hljs-built_in\\\">any</span>;\\n}\\n</code></pre>\\n<p><code>emitArrayActionRequest</code> accepts a partial of <code>ArrayActionRequestEvent</code>\\nwhich have the properties <code>tdmForm, fullName, runtimePath</code> omitted.</p>\\n<p>We mentioned that <code>emitArrayActionRequest</code> extends the event object, it\\nwill add this properties back and emit the full version of <code>ArrayActionRequestEvent</code></p>\\n<p>For example, to add an item:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">this</span>.dynForm.emitArrayActionRequest({\\n  action: <span class=\\\"hljs-string\\\">'add'</span>,\\n  renderInstruction: <span class=\\\"hljs-keyword\\\">this</span>.item,  \\n  formArray: <span class=\\\"hljs-keyword\\\">this</span>.fArray\\n});\\n</code></pre>\\n<p>Remove:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">const</span> INDEX_TO_REMOVE = <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">this</span>.dynForm.emitArrayActionRequest({\\n  action: <span class=\\\"hljs-string\\\">'remove'</span>,\\n  renderInstruction: item,\\n  formArray: <span class=\\\"hljs-keyword\\\">this</span>.fArray,\\n  atIdx: INDEX_TO_REMOVE\\n});\\n</code></pre>\\n<h2><a id=\\\"renderer-implementation\\\" class=\\\"anchor\\\" href=\\\"#renderer-implementation\\\"><span class=\\\"header-link\\\"></span></a>Renderer implementation</h2><p>To implement this feature we need to take a decision about how we\\ndisplay lists&#39;s in our UI, do we allow editing? do we inline array&#39;s\\nwith complex data structures (i.e. not primitive)? if not then how should\\nthey display?</p>\\n<p>The answer to all of the above is different from one app to the other\\nand these are not complete, there are a lot of things that might require\\nhost intervention, roles, disabling actions based on logic, etc...</p>\\n<p>For this demonstration we will show array&#39;s as list&#39;s with a checkbox\\nused for selection. A list of primitives (e.g. <code>string[]</code>) will display\\nas is, a list of a complex type will only show a read only value which\\nis the identity of the object, when an edit is in place the form will\\nshow an inline version of the model in edit.</p>\\n<p>Before we analyze, let&#39;s see the final result in action. All properties\\nthat are not array&#39;s are excluded to minimize the noise.</p>\\n\"},{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"part2\",\"code\":\"<p>Most of the work is done on the template side, the component is used\\nto handle the logic for emitting array actions and internal logic for\\ninline editing and selection management. </p>\\n<p>An <code>&lt;ng-template&gt;</code> was added, it is the template for array&#39;s, we can\\nsplit it to 3 sections:</p>\\n<ol>\\n<li>Handling primitives</li>\\n<li>Handling complex types</li>\\n<li>Action row (buttons)</li>\\n</ol>\\n<p>We use the <code>&lt;mat-list&gt;</code> component to wrap the first 2 sections.</p>\\n\"},{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"part3\",\"code\":\"<p>This part is simple, we use the <code>isPrimitive</code> property of <code>RenderInstruction</code>\\nto check what type we are dealing with. Note that it is used on the\\narray&#39;s instruction: <code>item.isPrimitive</code>.</p>\\n<p>If it is a primitive we use <code>ForFormArrayDirective</code> to iterate over\\nall items an call the renderer again, recursively, to render the control.</p>\\n<p>Just before that we add a checkbox, bound to the index of the item, so\\nwe cant track selections.</p>\\n\"},{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"part4\",\"code\":\"<p>Handling complex objects is a bit more <em>complex</em>...</p>\\n<div class=\\\"alert\\\">\\n  The following analysis is complex and it is only used to render\\n  a form control that is an array and it has a <strong>flattening</strong> definitions.\\n  <br>\\n  If you are not planning to define flattening definitions over an array,\\n  which is recommend not to do, you can skip this part.\\n</div>\\n\\n<p>We decided that list&#39;s with complex objects will not render form controls\\nfor each item, instead they will show a single field representing the\\nitem, as a read only element, the identity of the model.</p>\\n<p>When editing, the read only element goes away and we show the controls\\ninline, just for that item.</p>\\n<div class=\\\"alert\\\">\\n  This is just one way of doing it, there are other... dialogs,\\n  expanding rows, etc...\\n</div>\\n\\n<p>To identify the field we should display when not editing we need the\\nuser to define it, let&#39;s extend the <code>RenderDef</code> interface for that:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">declare</span> <span class=\\\"hljs-keyword\\\">module</span> '@tdm/ngx-dynamic-forms/src/interfaces' {\\n  <span class=\\\"hljs-keyword\\\">interface</span> RenderDef&lt;T <span class=\\\"hljs-keyword\\\">extends</span> keyof FormElementType = keyof FormElementType&gt; {\\n    identityKey?: <span class=\\\"hljs-built_in\\\">string</span>;\\n  }\\n}\\n</code></pre>\\n<p>The template will show the item only if it is not a primitive and\\nit has an identity key set.</p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ng-container</span> *<span class=\\\"hljs-attr\\\">ngIf</span>=<span class=\\\"hljs-string\\\">\\\"!item.isPrimitive &amp;&amp; item.identityKey\\\"</span>&gt;</span>\\n</code></pre>\\n<p>When showing primitives we used <code>ForFormArrayDirective</code> to iterate over\\nall items, we can&#39;t do that now because each item in <code>FormArray</code> can\\ntranslate to multiple fields if it has a <strong>flattening</strong> definition, the\\nother option is that it is a child form which is not handled in this\\nrenderer.</p>\\n<p>So instead we will manually iterate of the items in <code>FormArray</code></p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mat-list-item</span> *<span class=\\\"hljs-attr\\\">ngFor</span>=<span class=\\\"hljs-string\\\">\\\"let c of fArray.controls; index as i;\\\"</span>&gt;</span>\\n</code></pre>\\n<p>we show the checkbox and then we check if the item is in edit mode or\\nnot, when not we will show the identity of the item.</p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> *<span class=\\\"hljs-attr\\\">ngIf</span>=<span class=\\\"hljs-string\\\">\\\"inlineEdit !== i\\\"</span>&gt;</span>{{c.get(item.identityKey)?.value}}<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span>\\n</code></pre>\\n<p>The expression takes the <code>FormGroup</code> (<strong>c</strong>) and try&#39;s to get the child\\ncontrol matching the identity, if it is found it will show the value.</p>\\n<p>When we are <strong>in</strong> edit mode we will render all the controls within\\nthe item, we now need to add a nested for loop, iterating over all\\n<code>RenderInstruction</code> items, the children our array.</p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ng-container</span> *<span class=\\\"hljs-attr\\\">ngIf</span>=<span class=\\\"hljs-string\\\">\\\"inlineEdit === i\\\"</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">renderer-v4</span> *<span class=\\\"hljs-attr\\\">ngFor</span>=<span class=\\\"hljs-string\\\">\\\"let child of item.children\\\"</span>\\n               [<span class=\\\"hljs-attr\\\">tdmForm</span>]=<span class=\\\"hljs-string\\\">\\\"tdmForm\\\"</span>\\n               [<span class=\\\"hljs-attr\\\">item</span>]=<span class=\\\"hljs-string\\\">\\\"child\\\"</span>\\n               [<span class=\\\"hljs-attr\\\">fControl</span>]=<span class=\\\"hljs-string\\\">\\\"child.resolveFormArrayChild(fArray.controls[i])\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">renderer-v4</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">ng-container</span>&gt;</span>\\n</code></pre>\\n<p>This is a bit confusing, let analyze:</p>\\n<p>We have 2 objects we work with:</p>\\n<ul>\\n<li><code>fArray</code> - An instance of <code>FormArray</code><br>It contains <code>FormGroup</code> instances representing the complex objects we\\nwant to show.</li>\\n<li><code>item</code> - An instance of <code>RenderInstruction</code><br>The instruction for <code>fArray</code>, instructions how to render\\nthe array. It also has children, instances of <code>RenderInstruction</code></li>\\n</ul>\\n<p>The tricky part lies here:  </p>\\n<p><strong>While <code>item</code> and <code>fArray</code> correlate their children does not.</strong></p>\\n<p>This happens because we are rendering an array with <strong>flattening</strong>\\ndefinition.</p>\\n<p>The children of <code>fArray</code> are the objects we want to render, they are\\nall of the same type, what is the type?</p>\\n<p>The children of <code>item</code> are the instructions for the objects we are about\\nto render, together they are the type, a collection of properties that\\ncreate a structure.</p>\\n<p><code>item</code> is static metadata describing an array of a type/class (<code>Array&lt;T&gt;</code>)\\nwhich <code>fArray</code> contains in runtime.</p>\\n<p>So, for each <code>FormGroup</code> instance in <code>fArray</code> we have a nested for loop\\niterating over all of the properties/controls in that <code>FormGroup</code> and\\ndisplay them using the renderer, recursively.</p>\\n<p>When we call the renderer we send it the instructions for the property\\nwe want to render and we also need to send the form control for that\\nproperty.</p>\\n<p>The instruction is <code>child</code>. <code>item.children</code> contains the properties so each\\niteration is a property, i.e. <code>child</code>.</p>\\n<p>The control can be <code>c</code>, let&#39;s recall:</p>\\n<pre class=\\\"lang-html\\\"><code class=\\\"lang-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">mat-list-item</span> *<span class=\\\"hljs-attr\\\">ngFor</span>=<span class=\\\"hljs-string\\\">\\\"let c of fArray.controls; index as i;\\\"</span></span>\\n</code></pre>\\n<p>We are in an iteration, the item is <code>c</code> which is a <code>FormGroup</code> so it is\\nnot the control we need because it&#39;s the whole object, we need the\\nproperty that match&#39;s <code>child</code>, for that we need to use the method\\n<code>resolveFormArrayChild</code> in <code>RenderInstruction</code> that resolves the\\ncontrol.</p>\\n<div class=\\\"info\\\">\\n  The <code>FormGroup</code> instance <code>c</code> represent the object.<br>\\n  <code>child</code> represents the property we want from the object.<br>\\n   It might look intuitive to call <code>c.get(child.name)</code>, i.e. getting the\\n   property from an object, but it is not.\\n   <br>\\n   <br>\\n   Flattening definitions can be nested, it means that we can flatten\\n   deep. <code>c.get(child.name)</code> will work for depth 1 but to get  depth n\\n   we need to call <code>resolveFormArrayChild</code>\\n</div>\"},{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"part5\",\"code\":\"<p>The action row is straight forward, it uses the array action API to\\nbroadcast actions, the implementation it self is not important.</p>\\n<p>Below you can see the final source code for the renderer:</p>\\n\"},{\"file\":\"array-actions.component.ts\",\"lang\":\"ts\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-keyword\\\">import</span> { Component } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/core'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { ArrayActionRequestEvent } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@tdm/ngx-dynamic-forms'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { Hero } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'../16-arrays'</span>;\\n\\n<span class=\\\"hljs-meta\\\">@Component</span>({\\n  selector: <span class=\\\"hljs-string\\\">'form-array-actions'</span>,\\n  templateUrl: <span class=\\\"hljs-string\\\">'./array-actions.component.html'</span>,\\n  styleUrls: [ <span class=\\\"hljs-string\\\">'./array-actions.component.scss'</span> ],\\n})\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">class</span> ArrayActionsComponent {\\n  model: Hero;\\n\\n  <span class=\\\"hljs-keyword\\\">constructor</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">this</span>.model = <span class=\\\"hljs-keyword\\\">new</span> Hero();\\n    <span class=\\\"hljs-keyword\\\">this</span>.model.allies = [<span class=\\\"hljs-string\\\">'Thor'</span>, <span class=\\\"hljs-string\\\">'Captain America'</span>];\\n    <span class=\\\"hljs-keyword\\\">this</span>.model.basesDestroyed = [\\n      {\\n        name: <span class=\\\"hljs-string\\\">'Bat Cave'</span>,\\n        coordinates: {\\n          lng: <span class=\\\"hljs-number\\\">10</span>,\\n          lat: <span class=\\\"hljs-number\\\">-10</span>\\n        }\\n      },\\n      {\\n        name: <span class=\\\"hljs-string\\\">'Themyscira'</span>,\\n        coordinates: {\\n          lng: <span class=\\\"hljs-number\\\">99</span>,\\n          lat: <span class=\\\"hljs-number\\\">-99</span>\\n        }\\n      }\\n    ];\\n  }\\n\\n  onArrayActionRequest(event: ArrayActionRequestEvent): <span class=\\\"hljs-built_in\\\">void</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'add'</span> ) {\\n      <span class=\\\"hljs-comment\\\">// we need to create a form control instance, it can be FormControl but can also be FormGroup or FormArray</span>\\n      <span class=\\\"hljs-comment\\\">// we need to the serializer for that, so we use the helper function on [[TDMModelForm]]</span>\\n      event.tdmForm.appendControl(event.fullName);\\n      event.formArray.markAsDirty();\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'remove'</span> ) {\\n      event.formArray.removeAt(event.atIdx);\\n      event.formArray.markAsDirty();\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ( event.action === <span class=\\\"hljs-string\\\">'edit'</span> ) {\\n\\n    }\\n  }\\n\\n}\\n\",\"title\":\"Component\"},{\"file\":\"array-actions.component.html\",\"lang\":\"html\",\"section\":\"tdmDemo\",\"code\":\"  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dynamic-form</span> #<span class=\\\"hljs-attr\\\">dynForm</span>\\n                [<span class=\\\"hljs-attr\\\">model</span>]=<span class=\\\"hljs-string\\\">\\\"model\\\"</span>\\n                [<span class=\\\"hljs-attr\\\">filter</span>]=<span class=\\\"hljs-string\\\">\\\"['allies', 'basesDestroyed']\\\"</span> <span class=\\\"hljs-attr\\\">filterMode</span>=<span class=\\\"hljs-string\\\">\\\"include\\\"</span>\\n                (<span class=\\\"hljs-attr\\\">arrayActionRequest</span>)=<span class=\\\"hljs-string\\\">\\\"onArrayActionRequest($event)\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dynamic-form</span>&gt;</span>\\n\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">mat-raised-button</span> <span class=\\\"hljs-attr\\\">color</span>=<span class=\\\"hljs-string\\\">\\\"primary\\\"</span>\\n          [<span class=\\\"hljs-attr\\\">disabled</span>]=<span class=\\\"hljs-string\\\">\\\"dynForm.form.status !== 'VALID' || !dynForm.form.dirty\\\"</span>\\n          (<span class=\\\"hljs-attr\\\">click</span>)=<span class=\\\"hljs-string\\\">\\\"dynForm.tdmForm.commitToModel(true)\\\"</span>&gt;</span>SAVE<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">mat-button</span> [<span class=\\\"hljs-attr\\\">disabled</span>]=<span class=\\\"hljs-string\\\">\\\"dynForm.form.pristine\\\"</span> (<span class=\\\"hljs-attr\\\">click</span>)=<span class=\\\"hljs-string\\\">\\\"dynForm.tdmForm.reset()\\\"</span>&gt;</span>CANCEL<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\",\"title\":\"Template\"},{\"file\":\"array-actions.component.scss\",\"lang\":\"scss\",\"section\":\"default\",\"code\":\"\",\"title\":\"Style\"},{\"file\":\"model.ts\",\"lang\":\"ts\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-keyword\\\">import</span> { Model, Prop } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@tdm/ngx-dynamic-forms'</span>;\\n\\n<span class=\\\"hljs-meta\\\">@Model</span>({\\n  form: <span class=\\\"hljs-literal\\\">true</span>\\n})\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">class</span> Hero {\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Hero ID'</span>\\n      }\\n    }\\n  })\\n  id: <span class=\\\"hljs-built_in\\\">number</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      required: <span class=\\\"hljs-literal\\\">true</span>,\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Hero Name'</span>\\n      }\\n    }\\n  })\\n  name: <span class=\\\"hljs-built_in\\\">string</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'boolean'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Has Tracking Device'</span>\\n      }\\n    }\\n  })\\n  hasTracking: <span class=\\\"hljs-built_in\\\">boolean</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'slideToggle'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Double Agent'</span>\\n      }\\n    }\\n  })\\n  doubleAgent: <span class=\\\"hljs-built_in\\\">boolean</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'slider'</span>,\\n        label: <span class=\\\"hljs-string\\\">'BMI Index'</span>,\\n        data: { min: <span class=\\\"hljs-number\\\">1</span>, max: <span class=\\\"hljs-number\\\">35</span> }\\n      }\\n    }\\n  })\\n  bmi: <span class=\\\"hljs-built_in\\\">number</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'select'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Super Power'</span>,\\n        data: {\\n          options: [\\n              { value: <span class=\\\"hljs-string\\\">'selfHealing'</span>, label: <span class=\\\"hljs-string\\\">'Self Healing'</span> },\\n              { value: <span class=\\\"hljs-string\\\">'flying'</span>, label: <span class=\\\"hljs-string\\\">'Flying'</span> },\\n              { value: <span class=\\\"hljs-string\\\">'cloaking'</span>, label: <span class=\\\"hljs-string\\\">'Cloaking'</span> },\\n              { value: <span class=\\\"hljs-string\\\">'cloning'</span>, label: <span class=\\\"hljs-string\\\">'Cloaning'</span> },\\n              { value: <span class=\\\"hljs-string\\\">'invisibility'</span>, label: <span class=\\\"hljs-string\\\">'Invisibility'</span> }\\n          ]\\n        }\\n      }\\n    }\\n  })\\n  superPower: <span class=\\\"hljs-string\\\">'selfHealing'</span> | <span class=\\\"hljs-string\\\">'flying'</span> | <span class=\\\"hljs-string\\\">'cloaking'</span> | <span class=\\\"hljs-string\\\">'cloning'</span> | <span class=\\\"hljs-string\\\">'invisibility'</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      flatten: {\\n        name: {\\n          required: <span class=\\\"hljs-literal\\\">true</span>,\\n          render: {\\n            vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n            label: <span class=\\\"hljs-string\\\">'Base Name'</span>,\\n          }\\n        },\\n        coordinates: {\\n          flatten: {\\n            lng: {\\n              render: {\\n                vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n                label: <span class=\\\"hljs-string\\\">'Base Longitude'</span>\\n              }\\n            },\\n            lat: {\\n              render: {\\n                vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n                label: <span class=\\\"hljs-string\\\">'Base Latitude'</span>\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  })\\n  base: {\\n    name: <span class=\\\"hljs-built_in\\\">string</span>;\\n    coordinates: {\\n      lng: <span class=\\\"hljs-built_in\\\">number</span>;\\n      lat: <span class=\\\"hljs-built_in\\\">number</span>;\\n    }\\n  };\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      required: <span class=\\\"hljs-literal\\\">true</span>,\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Allies'</span>\\n      }\\n    }\\n  })\\n  allies: <span class=\\\"hljs-built_in\\\">string</span>[];\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'none'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Bases Destroyed'</span>,\\n        identityKey: <span class=\\\"hljs-string\\\">'name'</span>\\n      },\\n      flatten: {\\n        name: {\\n          required: <span class=\\\"hljs-literal\\\">true</span>,\\n          render: {\\n            vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n            label: <span class=\\\"hljs-string\\\">'Base Name'</span>,\\n          }\\n        },\\n        coordinates: {\\n          flatten: {\\n            lng: {\\n              render: {\\n                vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n                label: <span class=\\\"hljs-string\\\">'Base Longitude'</span>\\n              }\\n            },\\n            lat: {\\n              render: {\\n                vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n                label: <span class=\\\"hljs-string\\\">'Base Latitude'</span>\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  })\\n  basesDestroyed: <span class=\\\"hljs-built_in\\\">Array</span>&lt;{\\n    name: <span class=\\\"hljs-built_in\\\">string</span>;\\n    coordinates: {\\n      lng: <span class=\\\"hljs-built_in\\\">number</span>;\\n      lat: <span class=\\\"hljs-built_in\\\">number</span>;\\n    }\\n  }&gt;;\\n}\\n\",\"title\":\"Model\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@forms/tutorials/17-array-actions/__tdm-code__.ts\n// module id = x7rG\n// module chunks = 22"],"sourceRoot":"webpack:///"}