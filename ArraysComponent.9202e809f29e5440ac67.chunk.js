webpackJsonp([23],{ljOi:function(s,n){s.exports=[{file:"README.md",lang:"md",section:"default",code:'<p>In <code>@angular/forms</code> arrays are represented by the <code>FormArray</code> class.</p>\n<p>Quoting from the angular docs:</p>\n<blockquote>\n<p><code>FormArray</code> is one of the three fundamental building blocks used to\ndefine forms in Angular, along with <code>FormControl</code> and <code>FormGroup</code>.</p>\n</blockquote>\n<p>Structure wise, we can catalog <code>FormArray</code> and <code>FormGroup</code> as\n<strong>containers</strong> because they contain other control, including themselves.</p>\n<p>The array container is unique because it is considered dynamic, we can\nadd remove or move items in it.</p>\n<div class="alert">\n  While there is no limitation on removing or adding controls to a\n  <code>FormGroup</code> the library does not support that.\n\n  <code>FormGroup</code> represents the structure of a model and it does not make\n   sense to change the structure of a typed model. \n</div> \n\n<p>In angular, An instance of <code>FormArray</code> is not bound to a specific type.\nThis makes since because a control has no type information, it doesn&#39;t\ncare about the value it holds.</p>\n<p>The library however, works in a typed environment and assumes that\nand array has a defined type for items in it.</p>\n<div class="info">\n  This assumption does&#39;nt mean you can not work with untyped arrays, it\n  only means it is not supported out of the box and you will need to\n  handle it manually.<br></div> \n\n<p>Using array&#39;s doesn&#39;t require specific metadata, the library will figure\nout that an array is required just by the annotated type.</p>\n<p>Both primitives and complex types are supported, including the <code>flatten</code>\nfeature and <code>childForm</code> feature.</p>\n<p>Let&#39;s add a list of allies to the <code>Hero</code> class, an ally is referenced\nby name, so it&#39;s an array ot strings:</p>\n<pre class="lang-ts"><code class="lang-ts">  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Allies\'</span>\n      }\n    }\n  })\n  allies: <span class="hljs-built_in">string</span>[];\n</code></pre>\n<div class="info">\n  Setting <code>required</code> validation on an array means it must have at least\n  one item \n</div>\n\n<p>Using the same structure of the hero&#39;s base camp, let&#39;s add a list of\nall of the bases the hero has destroyed:</p>\n<pre class="lang-ts"><code class="lang-ts">  <span class="hljs-meta">@Prop</span>({\n    form: {\n      flatten: {\n        name: {\n          required: <span class="hljs-literal">true</span>,\n          render: {\n            vType: <span class="hljs-string">\'text\'</span>,\n            label: <span class="hljs-string">\'Base Name\'</span>,\n          }\n        },\n        coordinates: {\n          flatten: {\n            lng: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Longitude\'</span>\n              }\n            },\n            lat: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Latitude\'</span>\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  basesDestroyed: <span class="hljs-built_in">Array</span>&lt;{\n    name: <span class="hljs-built_in">string</span>;\n    coordinates: {\n      lng: <span class="hljs-built_in">number</span>;\n      lat: <span class="hljs-built_in">number</span>;\n    }\n  }&gt;;\n</code></pre>\n<p>In both samples the metadata is <strong>identical</strong> to the single (not array)\nversion of it.</p>\n<div class="alert">\n  Although possible, and demonstrated above, <code>flattening</code> of array types\n  is not recommended as it is difficult to reflect each item in the\n  array. The entire array becomes a flat object with repeated keys.\n  <br>\n  Working with array actions will target specific keys and not the\n  entire item.\n</div>\n'},{file:"arrays.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./model\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-arrays\'</span>,\n  templateUrl: <span class="hljs-string">\'./arrays.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./arrays.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ArraysComponent {\n  model: Hero;\n\n  <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">this</span>.model = <span class="hljs-keyword">new</span> Hero();\n    <span class="hljs-keyword">this</span>.model.allies = [<span class="hljs-string">\'Thor\'</span>, <span class="hljs-string">\'Captain America\'</span>];\n    <span class="hljs-keyword">this</span>.model.basesDestroyed = [\n      {\n        name: <span class="hljs-string">\'Bat Cave\'</span>,\n        coordinates: {\n          lng: <span class="hljs-number">10</span>,\n          lat: <span class="hljs-number">-10</span>\n        }\n      },\n      {\n        name: <span class="hljs-string">\'Themyscira\'</span>,\n        coordinates: {\n          lng: <span class="hljs-number">99</span>,\n          lat: <span class="hljs-number">-99</span>\n        }\n      }\n    ];\n  }\n}\n',title:"Component"},{file:"arrays.component.html",lang:"html",section:"tdmDemo",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'allies\', \'basesDestroyed\']"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab-group</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Allies"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">slaveOf</span>]=<span class="hljs-string">"dynForm"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'allies\']"</span> <span class="hljs-attr">filterMode</span>=<span class="hljs-string">"include"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-tab</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Bases Destroyed"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">slaveOf</span>]=<span class="hljs-string">"dynForm"</span> [<span class="hljs-attr">filter</span>]=<span class="hljs-string">"[\'basesDestroyed\']"</span> <span class="hljs-attr">filterMode</span>=<span class="hljs-string">"include"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-tab-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">"primary"</span>\n          [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"dynForm.form.status !== \'VALID\' || !dynForm.form.dirty"</span>\n          (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.tdmForm.commitToModel(true)"</span>&gt;</span>SAVE<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> [<span class="hljs-attr">disabled</span>]=<span class="hljs-string">"dynForm.form.pristine"</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.tdmForm.reset()"</span>&gt;</span>CANCEL<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>',title:"Template"},{file:"arrays.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: {\n          options: [\n              { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n              { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n              { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n              { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloaning\'</span> },\n              { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n          ]\n        }\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      flatten: {\n        name: {\n          required: <span class="hljs-literal">true</span>,\n          render: {\n            vType: <span class="hljs-string">\'text\'</span>,\n            label: <span class="hljs-string">\'Base Name\'</span>,\n          }\n        },\n        coordinates: {\n          flatten: {\n            lng: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Longitude\'</span>\n              }\n            },\n            lat: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Latitude\'</span>\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  base: {\n    name: <span class="hljs-built_in">string</span>;\n    coordinates: {\n      lng: <span class="hljs-built_in">number</span>;\n      lat: <span class="hljs-built_in">number</span>;\n    }\n  };\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      required: <span class="hljs-literal">true</span>,\n      render: {\n        vType: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Allies\'</span>\n      }\n    }\n  })\n  allies: <span class="hljs-built_in">string</span>[];\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        vType: <span class="hljs-string">\'none\'</span>,\n        label: <span class="hljs-string">\'Bases Destroyed\'</span>,\n        identityKey: <span class="hljs-string">\'name\'</span>\n      },\n      flatten: {\n        name: {\n          required: <span class="hljs-literal">true</span>,\n          render: {\n            vType: <span class="hljs-string">\'text\'</span>,\n            label: <span class="hljs-string">\'Base Name\'</span>,\n          }\n        },\n        coordinates: {\n          flatten: {\n            lng: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Longitude\'</span>\n              }\n            },\n            lat: {\n              render: {\n                vType: <span class="hljs-string">\'number\'</span>,\n                label: <span class="hljs-string">\'Base Latitude\'</span>\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  basesDestroyed: <span class="hljs-built_in">Array</span>&lt;{\n    name: <span class="hljs-built_in">string</span>;\n    coordinates: {\n      lng: <span class="hljs-built_in">number</span>;\n      lat: <span class="hljs-built_in">number</span>;\n    }\n  }&gt;;\n}\n',title:"Model"}]}});
//# sourceMappingURL=ArraysComponent.9202e809f29e5440ac67.chunk.js.map