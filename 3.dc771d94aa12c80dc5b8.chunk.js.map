{"version":3,"sources":["./src/demo/modules/@playground/playground-page/playground-page.component.ts","./src/demo/modules/@playground/playground-page/playground-page.component.html","./src/demo/modules/@playground/models/Users/UserDAO.ts","./src/demo/modules/@playground/module.ts","./src/demo/modules/@playground/models/Users/UsersBaseClass.ts","./src/demo/modules/@playground/models/Users/UsersInterface.ts","./src/demo/modules/@playground/models/Users/UserConst.ts"],"names":["User","__WEBPACK_IMPORTED_MODULE_1__models__","PlaygroundPageComponent","ngDAO","get","findById","then","user","console","log","err","alert","this","prototype","gogo","_this","$rc","events$","subscribe","e","type","setTimeout","id","disconnect","$refresh","_l","__WEBPACK_IMPORTED_MODULE_1__angular_core__","__WEBPACK_IMPORTED_MODULE_2__angular_common__","_ck","_v","_co","component","transform","busy$","busy","__WEBPACK_IMPORTED_MODULE_2__tdm_ngx_http_client__","__webpack_require__","ctx","a","b","options","setIdentity","UserDAO","bfRef","afRef","postDeserializedHandler","resp","postHandler","bfQuery","next","coll","length","bfFindById","afFindById","afQuery","__WEBPACK_IMPORTED_MODULE_0_tslib__","Object","__WEBPACK_IMPORTED_MODULE_1__tdm_data__","alias","event","action","method","Get","post","UserDAO_1","handler","pre","Éµ0","endpoint","urlParams","limit","d","__webpack_exports__","PlaygroundModule","User_","_super","UserBaseClass","UsersInterface","apply","arguments","UsersInterface_1","headers","validation","name","validate","errorMessage","User_1","skip","UserConst"],"mappings":"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","file":"3.dc771d94aa12c80dc5b8.chunk.js","sourcesContent":["import { Component } from '@angular/core';\nimport { NgDAO } from '@tdm/ngx-http-client';\n\nimport { UserBaseClass, UserConst, UsersInterface, UserDAO } from '../models';\n\nconst User = UserConst;\ntype User = UserConst;\n\n\n\n@Component({\n  selector: 'vehicle-page',\n  styleUrls: [ './playground-page.component.css' ],\n  templateUrl: './playground-page.component.html'\n})\nexport class PlaygroundPageComponent {\n  public user: User;\n\n  constructor(ngDAO: NgDAO) {\n    ngDAO.get(UserDAO).findById(6)\n      .then( user => {\n        console.log(user);\n      }, err => alert(err));\n\n    ngDAO.get(UserDAO).findById(5)\n      .then( user => {\n        console.log(user);\n      }, err => alert(err));\n    // this.user = new User();\n    this.user = User.findById(5);\n\n    // this.user.rawDeserialized({trailingSlashes: 'force'}).$rc.next()\n    //   .then( () => this.user.raw({withCredentials: true}).$rc.next() )\n    //   .then( () => this.gogo());\n\n\n    // this.user.id = 5;\n    // this.user.$refresh().$rc.next()\n    //   .then(() => {\n    //\n    //   })\n    //   .catch((err) => {\n    //   console.error(err);\n    //   });\n\n\n    // this.gogo();\n\n    // UserConst.query().$rc.next()\n    //   .then( coll => {\n    //   })\n  }\n\n  gogo() {\n\n    let $rc = this.user.$rc;\n    let subs = $rc.events$.subscribe(e => {\n      console.log(e.type);\n      if (e.type === 'ActionError') {\n        console.log(e['error'])\n      } else if (e.type === 'ActionEnd') {\n        setTimeout(() => {\n          this.user.id--;\n          if (this.user.id === 0) {\n            $rc.disconnect();\n          } else {\n            this.user.$refresh();\n          }\n        }, 500)\n      }\n    });\n\n    this.user.id = 2;\n    this.user.$refresh();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/playground-page/playground-page.component.ts","<div class=\"page-padding\">\n  <h1>Obs$  : {{ user.$rc.busy$ | async }}</h1>\n  <h1>Static: {{ user.$rc.busy }}</h1>\n  <pre>{{user | json}}</pre>\n</div>\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/playground-page/playground-page.component.html","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Single class, no interface, all in one place\n *   - Single place for concrete implementation\n *   - Can't make mistakes of implementing public API in wrong place.\n *   - Allows inheritance\n *\n * Cons:\n *   - Requires manual type creation (https://github.com/Microsoft/TypeScript/issues/6606)\n *   - For multiple mixins need to create type without ActiveRecord<> help.\n *     https://github.com/Microsoft/TypeScript/issues/13798\n *   - Won't work with angular DI + AOT (https://github.com/angular/angular/issues/14128)\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, ExtendAction, ExecuteContext, IdentityValueType, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: {\n    limit: '5'\n  }\n})\n@Injectable()\nexport class UserDAO implements  BeforeHook<'bfRef', HttpActionOptions>,\n                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @Hook({event: 'before', action: '$refresh'})\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @Hook({event: 'after', action: '$refresh'})\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: UserDAO.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: UserDAO.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'before', action: 'findById'})\n  static bfFindById(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('BeforeFindById');\n  }\n  @Hook({event: 'after', action: 'findById'})\n  static afFindById(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('AfterFindById');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n  @ExtendAction({\n    pre: (ctx: ExecuteContext<any>, id: IdentityValueType, a:number, b: number, options: HttpActionOptions) => {\n      ctx.setIdentity(id);\n      return options;\n    }\n  })\n  static find: (id: IdentityValueType, a:number, b: number, options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UserDAO.ts","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '@shared';\nimport { PlaygroundPageComponent } from './playground-page';\nimport { ROUTES } from './routes';\n\n/**\n * An example of handling non-resource oriented REST API's.\n *\n * @demo core: Identity, ExtendAction, transformNameStrategy, skip\n * @demo angular-http: HttpResource, UrlParam\n */\n@NgModule({\n  declarations: [\n    PlaygroundPageComponent\n  ],\n  imports: [\n    SharedModule,\n\n    RouterModule.forChild(ROUTES)\n  ],\n})\nexport class PlaygroundModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/module.ts","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Interfaces exposed for both static and instance\n *   - Single place for concrete implementation\n *   - Exporting a native class and not const + type\n *   - Should support angular DI\n *\n * Cons:\n *   - Having 2 classes, cumbersome.\n *   - Members defined ONLY IN the exposed implementation (i.e. not part of the private class) will\n *     appear as member on the return type of INSTANCE methods that return \"this\" but WILL NOT\n *     appear on the return type of STATIC methods that return \"this\" - CONFUSING.\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\nexport class User_ implements   BeforeHook<'bfRef', HttpActionOptions>,\n                                AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @BeforeHook('$refresh')\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @AfterHook('$refresh')\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: User_.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: User_.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n}\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: { // there are hard coded params\n    limit: '5' // not in path so will go to query string (?param=15)\n  },\n})\n@Injectable()\nexport class UserBaseClass extends ActiveRecord(User_) { }\n\n\n// UserBaseClass.find(2).username__;                                    // OK\n// UserBaseClass.find(2).usernam23e;                                    // SHOULD ERROR\n// UserBaseClass.num;                                                   // OK\n// new UserBaseClass().$refresh().username__;                           // OK\n// const user: UserBaseClass = new UserBaseClass();                     // OK\n// user.$refresh().username__;                                          // OK\n// user.$refresh().abcd;                                                // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                                   // OK\n// user.$rc.next().then( u => u.f34 );                                  // SHOULD ERROR\n// UserBaseClass.query().$rc.next().then(coll => coll );     // OK\n// UserBaseClass.query().$rc.next().then(coll => coll.sdfd );           // SHOULD ERROR\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UsersBaseClass.ts","/**\n * Model usage example - Interfaces\n *\n * This example demonstrates model creation using 1 concrete class and 2 interfaces.\n * The interfaces provides the structure for both the static and instance shape, the concrete class\n * provides implementation and it is exposed.\n *\n * Pros:\n *   - Design fits I in SOLID\n *   - single concrete implementation\n *   - Exporting a native class and not const + type\n *   - Should support angular DI\n *\n * Cons:\n *   - Double the work, a lot of boilerplate\n *   - Writing interfaces for instance & static, cumbersome\n *   - Members defined ONLY IN the concrete implementation (i.e. not part of the interface) will\n *     appear as member on the return type of INSTANCE methods that return \"this\" but WILL NOT\n *     appear on the return type of STATIC methods that return \"this\" - CONFUSING.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, ARInterface, TDMCollection, Constructor, Prop, Exclude, ExecuteResponse, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n\nexport interface IUserInterfaceStatic extends Constructor<IUserInterface> {\n  bfQuery(this: TDMCollection<ActiveRecord<IUserInterface>>);\n  afQuery(this: TDMCollection<ActiveRecord<IUserInterface>>);\n}\n\nexport interface IUserInterface extends ARInterface<IUserInterface, HttpActionOptions> {\n  id: number;\n  username__: string;\n  _motto_: string;\n\n  rawDeserialized: (options?: HttpActionOptions) => ActiveRecord<IUserInterface>;\n  raw: (options?: HttpActionOptions) => ActiveRecord<IUserInterface>;\n}\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: { // there are hard coded params\n    limit: '5' // not in path so will go to query string (?param=15)\n  },\n  headers: {} // set custom headers for this resource\n  // more... setting the transformer (incoming result to object), security etc...\\\n})\n@Injectable()\nexport class UsersInterface extends ActiveRecord<IUserInterface, IUserInterfaceStatic>()\n                            implements  IUserInterface,\n                                        BeforeHook<'bfRef', HttpActionOptions>,\n                                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n\n  @BeforeHook('$refresh')\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @AfterHook('$refresh')\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: UsersInterface.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<UsersInterface>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: UsersInterface.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<UsersInterface>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<UsersInterface>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<UsersInterface>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n}\n\n// UsersInterface.find(2).username__;                                   // OK\n// UsersInterface.find(2).usernam23e;                                   // SHOULD ERROR\n// UsersInterface.num;                                                  // OK\n// new UsersInterface().$refresh().username__;                          // OK\n// const user: UsersInterface = new UsersInterface();                   // OK\n// user.$refresh().username__;                                          // OK\n// user.$refresh().abcd;                                                // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                                   // OK\n// user.$rc.next().then( u => u.f34 );                                  // SHOULD ERROR\n// UsersInterface.query().$rc.next().then( coll => coll );   // OK\n// UsersInterface.query().$rc.next().then( coll => coll.sdfd );         // SHOULD ERROR\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UsersInterface.ts","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Single class, no interface, all in one place\n *   - Single place for concrete implementation\n *   - Can't make mistakes of implementing public API in wrong place.\n *   - Allows inheritance\n *\n * Cons:\n *   - Requires manual type creation (https://github.com/Microsoft/TypeScript/issues/6606)\n *   - For multiple mixins need to create type without ActiveRecord<> help.\n *     https://github.com/Microsoft/TypeScript/issues/13798\n *   - Won't work with angular DI + AOT (https://github.com/angular/angular/issues/14128)\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, ExtendAction, ExecuteContext, IdentityValueType, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: {\n    limit: '5'\n  },\n  skip: true\n})\n@Injectable()\nclass User_ implements  BeforeHook<'bfRef', HttpActionOptions>,\n                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username',\n    validation: {\n      name: 'test-validator',\n      validate(ctx) {\n        return false;\n      },\n      errorMessage(ctx) {\n        return 'validation error';\n      }\n    }\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @Hook({event: 'before', action: '$refresh'})\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @Hook({event: 'after', action: '$refresh'})\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: User_.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: User_.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n  @ExtendAction({\n    pre: (ctx: ExecuteContext<any>, id: IdentityValueType, a:number, b: number, options: HttpActionOptions) => {\n      ctx.setIdentity(id);\n      return options;\n    }\n  })\n  static find: (id: IdentityValueType, a:number, b: number, options?: HttpActionOptions) => ActiveRecord<User_>;\n}\n\nexport const UserConst = ActiveRecord(User_);\nexport type UserConst = ActiveRecord<User_>;\n\n// UserConst.find(2, 3, 4).username__;                              // OK\n// UserConst.find(2, 3, 4).usernam23e;                              // SHOULD ERROR\n// UserConst.num;                                                   // OK\n// new UserConst().$refresh().username__;                           // OK\n// const user: UserConst = new UserConst();                         // OK\n// user.$refresh().username__;                                      // OK\n// user.$refresh().abcd;                                            // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                               // OK\n// user.$rc.next().then( u => u.f34 );                              // SHOULD ERROR\n// UserConst.query().$rc.next().then(coll => coll );     // OK\n// UserConst.query().$rc.next().then(coll => coll.sdfd );           // SHOULD ERROR\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UserConst.ts"],"sourceRoot":"webpack:///"}