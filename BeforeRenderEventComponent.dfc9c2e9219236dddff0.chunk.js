webpackJsonp([11],{aFIl:function(s,n){s.exports=[{file:"before-render-event.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { BeforeRenderEventHandler } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-keyword">import</span> { User } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../models\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> STATES: <span class="hljs-built_in">Array</span>&lt;{ label: <span class="hljs-built_in">string</span>; value: <span class="hljs-built_in">string</span>; }&gt; = [\n  {\n    label: <span class="hljs-string">\'Alabama\'</span>,\n    value: <span class="hljs-string">\'AL\'</span>\n  },\n  {\n    label: <span class="hljs-string">\'Alaska\'</span>,\n    value: <span class="hljs-string">\'AK\'</span>\n  }\n  <span class="hljs-comment">// ...</span>\n];\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-before-render-event\'</span>,\n  templateUrl: <span class="hljs-string">\'./before-render-event.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./before-render-event.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> BeforeRenderEventComponent {\n  model = <span class="hljs-keyword">new</span> User();\n\n  beforeRender($event: BeforeRenderEventHandler): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> email = $event.instructions[<span class="hljs-string">\'email\'</span>];\n    <span class="hljs-keyword">if</span> (email) {\n      <span class="hljs-comment">// CHANGING RENDERING TYPE ON THE FLY</span>\n      email.type = <span class="hljs-string">\'slideToggle\'</span>;\n    }\n    <span class="hljs-keyword">const</span> addressState = $event.instructions[<span class="hljs-string">\'address.state\'</span>];\n    <span class="hljs-keyword">if</span> (addressState) {\n      <span class="hljs-comment">// ASYNC CALLS THAT BLOCK THE WHOLE FORM FROM RENDERING, GOOD FOR GETTING DATA FROM REMOTE SERVER.</span>\n      <span class="hljs-comment">// E.G.: GETTING GROUPS LISTED UNDER A USER, ETC...</span>\n      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>( <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> setTimeout(r, <span class="hljs-number">1000</span> ))\n        .then( <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          addressState.mergeData({\n            options: STATES\n          });\n        });\n      <span class="hljs-comment">// mark this field as async, no render until promise completes.</span>\n      $event.async(p);\n    }\n  }\n}\n',title:"Component"},{file:"before-render-event.component.html",lang:"html",section:"tdmDemo",code:'<span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> (<span class="hljs-attr">beforeRender</span>)=<span class="hljs-string">"beforeRender($event)"</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"before-render-event.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"user.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { FormModel, FormProp } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>()\n<span class="hljs-meta">@FormModel</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> User {\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Name\'</span>\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Email Address\'</span>\n    }\n  })\n  email: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    flatten: {\n      street: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'Street\'</span>\n        }\n      },\n      city: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'City\'</span>\n        }\n      },\n      zip: {\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n          label: <span class="hljs-string">\'ZIP\'</span>\n        }\n      },\n      state: {\n        defaultValue: <span class="hljs-string">\'CA\'</span>,\n        render: {\n          label: <span class="hljs-string">\'State\'</span>,\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n          data: {\n            options: [\n              { value: <span class="hljs-string">\'CA\'</span>, label: <span class="hljs-string">\'California\'</span> },\n              { value: <span class="hljs-string">\'NY\'</span>, label: <span class="hljs-string">\'New York\'</span> },\n              { value: <span class="hljs-string">\'WA\'</span>, label: <span class="hljs-string">\'Washington\'</span> },\n              { value: <span class="hljs-string">\'NJ\'</span>, label: <span class="hljs-string">\'New Jersey\'</span> }\n            ]\n          }\n        }\n      }\n    }\n  })\n  address: {\n    street: <span class="hljs-built_in">string</span>;\n    city: <span class="hljs-built_in">string</span>;\n    zip: <span class="hljs-built_in">number</span>;\n    state: <span class="hljs-string">\'CA\'</span> | <span class="hljs-string">\'NY\'</span> | <span class="hljs-string">\'GA\'</span> | <span class="hljs-string">\'WY\'</span>;\n  };\n}\n',title:"Model"},{file:"README.md",lang:"md",section:"default",code:"<p>A form control is represented by an instance of <code>RenderInstruction</code>,\nthese instructions are then used to render the control, i.e. create a UI\nrepresentation of it.\nIn other words, the render instructions are context for the form control templates.</p>\n<p>Render instructions are created based on the metadata in the model,\nthey are static and so each instance of a <code>DynamicFormComponent</code> has a\nunique set of render instructions based on the static instructions.</p>\n<p>There are scenarios where you need to dynamically update the metadata\nfor form control, such might be a requirement for different type of\ncontrol based on a predicate or populating a selection box from a remote\nsource</p>\n<p>The <code>(beforeRender)</code> event is fired on the first render and then\nwhenever the <code>redraw()</code> method is invoked.</p>\n<p>The event provide&#39;s access to the <code>RenderInstruction</code>s instance used by\nthe form and it can alter each instance to change the way it will render\nor what data it will render with.</p>\n<p>The event handler can notify that it is async by providing a promise and\nthe rendering can not complete until the promise resolves, this is a\ngood place to fetch data from a remote server.</p>\n<p>This example changes the email field rendering type to a slide-toggle.</p>\n<p>In addition it mocks an async call in the <code>address.state</code> field and\nfetch&#39;s a list of all state, you can see this list is the complete one.\nThe mock creates 1000ms timeout which in that time the form will not\nrender.</p>\n<blockquote>\n<p>You can use the <code>(renderState)</code> event to get notification when a form\nis ready to render, this is the place to add the proper UX like\nspinners, blockers etc...</p>\n</blockquote>\n"}]}});
//# sourceMappingURL=BeforeRenderEventComponent.dfc9c2e9219236dddff0.chunk.js.map