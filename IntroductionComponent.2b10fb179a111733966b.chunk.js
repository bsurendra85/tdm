webpackJsonp([18],{"n8q/":function(s,n){s.exports=[{file:"README.md",lang:"md",section:"PART-1",code:'<h1 id="tutorial-forms-with-tdm">Tutorial: Forms with @tdm</h1>\n<p>This tutorial will take you through the wonders of dynamic forms using\nthe <code>ngx-dynamic-forms</code> package from <code>@tdm</code>.</p>\n<p>We will start with the basics, working with the simplest of forms and\nclimb up into the wild west world of complex forms.</p>\n<p>By the end of the tutorial you will be able to do the following:</p>\n<ul>\n<li>Create a model and render a FORM from it.</li>\n<li>Split a single form into Virtual Groups, rendering in different places.</li>\n<li>Hide, Disable or Exclude controls</li>\n<li>Create a hot binding between a form and a model instance (instant change)</li>\n<li>Override the template for a specific control in a specific form.</li>\n<li>Populate control metadata in real time (e.g. A select box of users fetched from a changing source) </li>\n<li>Render a form asynchronously, while fetching data from a server (e.g. Fetching the user list from a remote source)</li>\n<li>Update the UI when a form is not ready (e.g. blocker, spinner)</li>\n<li>Changing the type of a control on the fly and on demand</li>\n<li>Work with arrays, get notified on add/remove/move requests and apply</li>\n<li>Flatten nested objects in a model into a single level form  </li>\n<li>Invoke and control child forms (model within a model) </li>\n<li>And more, with cool examples</li>\n</ul>\n'},{file:"README.md",lang:"md",section:"PART-2",code:'<h2 id="the-dashboard">The Dashboard</h2>\n<p>The tutorial contains a lot of examples, in most of them you&#39;ll find a\ncontainer called the dashboard, this is an important tool, let&#39;s review\nit quickly:</p>\n'},{file:"README.md",lang:"md",section:"PART-3",code:'<p>Before we start rocking let&#39;s review the environment you&#39;re about to use.<br>The examples in this tutorial are all real time angular code, running\nin your browser.<br>Each example comes with a dashboard that provides tools to inspect and\ninteract with the example, it&#39;s internal form/s and library instances.  </p>\n<p>The dashboard is the top panel, above the form showcased in the example.</p>\n<p><strong>You&#39;ve already seen the dashboard, it right above...</strong></p>\n<p>Let&#39;s review what we can do with the dashboard:</p>\n<h3 id="real-time-form-status-indicator-led-">Real time form status indicator LED.</h3>\n<p>The LED is located at the right side.</p>\n<p>Each color represents a form status:</p>\n<ul>\n<li>Blinking Red: form is in an invalid state</li>\n<li>Blinking Blue: form is pending (async validation call)</li>\n<li>Yellow: form is disabled</li>\n<li>Green: Form is valid</li>\n</ul>\n<h3 id="source-code-view-">Source code view:</h3>\n<p>The source code view can be toggled by the <strong>&lt; &gt;</strong> button located in\nthe left section of the dashboard.  </p>\n<p>The source code view replace the form view, toggle it to see the form again.  </p>\n<p>An example comes with a complete source code for the component/s, template/s,\nstyle/s, model/s and any other code used by it.</p>\n<h3 id="form-model-interaction-menu">Form / Model interaction menu</h3>\n<p>Next to the source code button you will find the interaction menu.<br>In the menu you will find some tools to help you interact with the\nexample and inspect the current state:</p>\n<ul>\n<li><p><strong>{ JSON View }</strong>\nToggle&#39;s (show/hide) real time JSON view of the model or the form.<br>Appears in the <strong>right panel</strong> (we will get to panels in a bit)</p>\n<blockquote>\n<p>If you don&#39;t know the difference between JSON view of model and form\nplease read the <strong>Know your framework</strong> section at the bottom.</p>\n</blockquote>\n</li>\n<li><p><strong>Sync Form</strong>\nSync the form, this operation will updates the form values and validity status.<br>It just calls <code>updateValueAndValidity()</code> on the form.</p>\n</li>\n<li><p><strong>Commit</strong>\nTakes the current form and commit&#39;s it to the model.</p>\n<blockquote>\n<p>If you don&#39;t understand why we need to commit a form please read\nthe <strong>Know your framework</strong> section at the bottom.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id="panels">Panels</h3>\n<p>The dashboard comes with 2 side panels, one on the left and one on the right.</p>\n<p>The <strong>right panel</strong> is <strong>usually</strong> used to display general, cross example\ninformation. A good example is the JSON View for model or form.</p>\n<p>The <strong>left panel</strong> is <strong>usually</strong> used to display example specific information.<br>It can not be opened from the top panel, and it might not exist, depending on the example.  </p>\n<p>If it does exist, optional buttons to control will display above the form.</p>\n<p>The <strong>Exclude / Disabled / Hidden state</strong> example makes use of the left panel.</p>\n'},{file:"introduction.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n\n<span class="hljs-keyword">import</span> { UIDeveloper } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./model\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-introduction\'</span>,\n  templateUrl: <span class="hljs-string">\'./introduction.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./introduction.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> IntroductionComponent {\n  model = <span class="hljs-keyword">new</span> UIDeveloper();\n}\n',title:"Component"},{file:"introduction.component.html",lang:"html",section:"TDM-DEMO",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"introduction.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"model.ts",lang:"ts",section:"DEMO-1",code:'<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> UIDeveloper {\n  name: <span class="hljs-built_in">string</span>;\n\n  yearOfBirth: <span class="hljs-built_in">number</span>;\n\n  gender: <span class="hljs-string">\'male\'</span> | <span class="hljs-string">\'female\'</span> | <span class="hljs-string">\'other\'</span>;\n\n  framework: <span class="hljs-string">\'angular\'</span> | <span class="hljs-string">\'react\'</span> | <span class="hljs-string">\'vue\'</span> | <span class="hljs-string">\'ember\'</span> | <span class="hljs-string">\'knockout\'</span> | <span class="hljs-string">\'other\'</span>;\n}',title:"UI Developer"},{file:"model.ts",lang:"ts",section:"DEMO-2",code:'<span class="hljs-keyword">import</span> { Validators } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> { Model } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { FormModel, FormProp } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>()\n<span class="hljs-meta">@FormModel</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> UIDeveloper {\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'Developer Name\'</span>\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n      label: <span class="hljs-string">\'Year Of Birth\'</span>\n    },\n    validators: Validators.compose([Validators.min(<span class="hljs-number">1900</span>), Validators.max(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear())])\n  })\n  yearOfBirth: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'radio\'</span>,\n      label: <span class="hljs-string">\'Gender\'</span>,\n      data: {\n        options: [\n          { value: <span class="hljs-string">\'male\'</span>, label: <span class="hljs-string">\'MALE\'</span> },\n          { value: <span class="hljs-string">\'female\'</span>, label: <span class="hljs-string">\'FEMALE\'</span> },\n          { value: <span class="hljs-string">\'other\'</span>, label: <span class="hljs-string">\'OTHER\'</span> },\n        ]\n      }\n    }\n  })\n  gender: <span class="hljs-string">\'male\'</span> | <span class="hljs-string">\'female\'</span> | <span class="hljs-string">\'other\'</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n      label: <span class="hljs-string">\'Framework\'</span>,\n      data: {\n        options: [\n          { value: <span class="hljs-string">\'angular\'</span> },\n          { value: <span class="hljs-string">\'react\'</span> },\n          { value: <span class="hljs-string">\'vue\'</span> },\n          { value: <span class="hljs-string">\'ember\'</span> },\n          { value: <span class="hljs-string">\'knockout\'</span> },\n          { value: <span class="hljs-string">\'other\'</span> }\n        ]\n      }\n    }\n  })\n  framework: <span class="hljs-string">\'angular\'</span> | <span class="hljs-string">\'react\'</span> | <span class="hljs-string">\'vue\'</span> | <span class="hljs-string">\'ember\'</span> | <span class="hljs-string">\'knockout\'</span> | <span class="hljs-string">\'other\'</span>;\n}',title:"Model"}]}});
//# sourceMappingURL=IntroductionComponent.2b10fb179a111733966b.chunk.js.map