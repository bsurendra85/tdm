{"version":3,"sources":["./src/demo/modules/@forms/tutorials/6-validation/__tdm-code__.ts"],"names":["module","exports","file","lang","section","code","title"],"mappings":"sCAAAA,EAAAC,UAAmBC,KAAA,YAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,wxGAAo7GH,KAAA,0BAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,guBAAozBC,MAAA,cAA0BJ,KAAA,4BAAAC,KAAA,OAAAC,QAAA,UAAAC,KAAA,y9BAAkkCC,MAAA,aAAgCJ,KAAA,WAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,kkJAAqtJC,MAAA","file":"ValidationComponent.47ddd5f077b8819fdf6f.chunk.js","sourcesContent":["module.exports = [{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"default\",\"code\":\"<h1><a id=\\\"validation\\\" class=\\\"anchor\\\" href=\\\"#validation\\\"><span class=\\\"header-link\\\"></span></a>Validation</h1><h2><a id=\\\"passthrough\\\" class=\\\"anchor\\\" href=\\\"#passthrough\\\"><span class=\\\"header-link\\\"></span></a>Passthrough</h2><p>Validation is not managed by the library, it is passed through to\\nthe forms engine and so validation is implemented similar to the way\\nit is done in reactive forms.</p>\\n<p>Validation is applied on 2 levels:</p>\\n<ul>\\n<li>Model level</li>\\n<li>Property level</li>\\n</ul>\\n<p>To apply validation on the model level just use the metadata argument\\nin the <code>@Model</code> decorator.</p>\\n<p>To apply validation on the property level just use the metadata argument\\nin the <code>@Prop</code> decorator.</p>\\n<p>Validation is applied the same way it is done in <code>@angular/forms</code>:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\">  <span class=\\\"hljs-keyword\\\">import</span> { Validators } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/forms'</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: { ... },\\n      validators: Validators.compose([ Validators.min(<span class=\\\"hljs-number\\\">1000</span>), Validators.max(<span class=\\\"hljs-number\\\">999999</span>) ])\\n    }\\n  })\\n  id: <span class=\\\"hljs-built_in\\\">number</span>;\\n</code></pre>\\n<p>And of course async validation: </p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\">  <span class=\\\"hljs-keyword\\\">import</span> { ValidationErrors, Validators, AbstractControl } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/forms'</span>;\\n\\n  <span class=\\\"hljs-comment\\\">// WILL CHECK IF THE NAME STARTS WITH \\\"A\\\" or \\\"a\\\", if so it fails!</span>\\n  <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">fakeCheckName</span>(<span class=\\\"hljs-params\\\">c: AbstractControl</span>): <span class=\\\"hljs-title\\\">Promise</span>&lt;<span class=\\\"hljs-title\\\">ValidationErrors</span> | <span class=\\\"hljs-title\\\">null</span>&gt; </span>{\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-built_in\\\">Promise</span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =&gt;</span> {\\n      setTimeout(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> { ... }, <span class=\\\"hljs-number\\\">1000</span>);\\n    });\\n  }\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: { ... },\\n      asyncValidators: fakeCheckName\\n    }\\n  })\\n  name: <span class=\\\"hljs-built_in\\\">string</span>;\\n</code></pre>\\n<h2><a id=\\\"required\\\" class=\\\"anchor\\\" href=\\\"#required\\\"><span class=\\\"header-link\\\"></span></a>Required</h2><p>The <code>required</code> validation is unique because it also validates the\\nstructure of an object, additionally <code>required</code> is a common validator, \\nwidely used.</p>\\n<p>For these reasons it can be set using a specific property.</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\">  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      required: <span class=\\\"hljs-literal\\\">true</span>,\\n      render: { ... }\\n    }\\n  })\\n</code></pre>\\n<p>Let see it all in action:</p>\\n<div class=\\\"info\\\">\\n  When setting the <code>name</code>, watch how the status LED turns to blinking \\n  blue, this means <strong>PENDING</strong> state.\\n</div>\\n\\n\"},{\"file\":\"validation.component.ts\",\"lang\":\"ts\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-keyword\\\">import</span> { Component } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/core'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { Hero } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./model'</span>;\\n\\n<span class=\\\"hljs-meta\\\">@Component</span>({\\n  selector: <span class=\\\"hljs-string\\\">'form-validation'</span>,\\n  templateUrl: <span class=\\\"hljs-string\\\">'./validation.component.html'</span>,\\n  styleUrls: [ <span class=\\\"hljs-string\\\">'./validation.component.scss'</span> ],\\n})\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">class</span> ValidationComponent {\\n\\n  model = <span class=\\\"hljs-keyword\\\">new</span> Hero();\\n}\\n\",\"title\":\"Component\"},{\"file\":\"validation.component.html\",\"lang\":\"html\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">tdm-markdown-view</span> [<span class=\\\"hljs-attr\\\">markdown</span>]=<span class=\\\"hljs-string\\\">\\\"code | async | tdmCode:[{file: 'README.md'}]:true\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">tdm-markdown-view</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">form-wrapper</span> <span class=\\\"hljs-attr\\\">title</span>=<span class=\\\"hljs-string\\\">\\\"Validation\\\"</span>\\n              [<span class=\\\"hljs-attr\\\">code</span>]=<span class=\\\"hljs-string\\\">\\\"code | async | tdmCode:[{title: 'Component'}, {title: 'Template'}, {title: 'Model'}]\\\"</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dynamic-form</span> [<span class=\\\"hljs-attr\\\">model</span>]=<span class=\\\"hljs-string\\\">\\\"model\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dynamic-form</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">form-wrapper</span>&gt;</span>\\n\",\"title\":\"Template\"},{\"file\":\"model.ts\",\"lang\":\"ts\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-keyword\\\">import</span> { Model, Prop } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@tdm/ngx-dynamic-forms'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { ValidationErrors, Validators, AbstractControl } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/forms'</span>;\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">fakeCheckName</span>(<span class=\\\"hljs-params\\\">c: AbstractControl</span>): <span class=\\\"hljs-title\\\">Promise</span>&lt;<span class=\\\"hljs-title\\\">ValidationErrors</span> | <span class=\\\"hljs-title\\\">null</span>&gt; </span>{\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-built_in\\\">Promise</span>(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resolve</span> =&gt;</span> {\\n    setTimeout(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n      <span class=\\\"hljs-keyword\\\">const</span> name = c.value || <span class=\\\"hljs-string\\\">''</span>;\\n      <span class=\\\"hljs-keyword\\\">if</span> (!name || name[<span class=\\\"hljs-number\\\">0</span>].toLowerCase() === <span class=\\\"hljs-string\\\">'a'</span>) {\\n        resolve({\\n          nameExists: <span class=\\\"hljs-string\\\">`<span class=\\\"hljs-subst\\\">${name}</span> already exists`</span>\\n        });\\n      } <span class=\\\"hljs-keyword\\\">else</span> {\\n        resolve(<span class=\\\"hljs-literal\\\">null</span>);\\n      }\\n    }, <span class=\\\"hljs-number\\\">1000</span>);\\n  });\\n}\\n\\n<span class=\\\"hljs-meta\\\">@Model</span>({\\n  form: <span class=\\\"hljs-literal\\\">true</span>\\n})\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">class</span> Hero {\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Hero ID'</span>\\n      },\\n      validators: Validators.compose([ Validators.min(<span class=\\\"hljs-number\\\">1000</span>), Validators.max(<span class=\\\"hljs-number\\\">999999</span>) ])\\n    }\\n  })\\n  id: <span class=\\\"hljs-built_in\\\">number</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      required: <span class=\\\"hljs-literal\\\">true</span>,\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Hero Name'</span>\\n      },\\n      asyncValidators: fakeCheckName\\n    }\\n  })\\n  name: <span class=\\\"hljs-built_in\\\">string</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'boolean'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Has Tracking Device'</span>\\n      }\\n    }\\n  })\\n  hasTracking: <span class=\\\"hljs-built_in\\\">boolean</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'slideToggle'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Double Agent'</span>\\n      }\\n    }\\n  })\\n  doubleAgent: <span class=\\\"hljs-built_in\\\">boolean</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'slider'</span>,\\n        label: <span class=\\\"hljs-string\\\">'BMI Index'</span>,\\n        data: { min: <span class=\\\"hljs-number\\\">1</span>, max: <span class=\\\"hljs-number\\\">35</span> }\\n      }\\n    }\\n  })\\n  bmi: <span class=\\\"hljs-built_in\\\">number</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@Prop</span>({\\n    form: {\\n      required: <span class=\\\"hljs-literal\\\">true</span>,\\n      render: {\\n        vType: <span class=\\\"hljs-string\\\">'select'</span>,\\n        label: <span class=\\\"hljs-string\\\">'Super Power'</span>,\\n        data: { options: [\\n          { value: <span class=\\\"hljs-string\\\">'selfHealing'</span>, label: <span class=\\\"hljs-string\\\">'Self Healing'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'flying'</span>, label: <span class=\\\"hljs-string\\\">'Flying'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'cloaking'</span>, label: <span class=\\\"hljs-string\\\">'Cloaking'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'cloning'</span>, label: <span class=\\\"hljs-string\\\">'Cloaning'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'invisibility'</span>, label: <span class=\\\"hljs-string\\\">'Invisibility'</span> }\\n        ]}\\n      }\\n    }\\n  })\\n  superPower: <span class=\\\"hljs-string\\\">'selfHealing'</span> | <span class=\\\"hljs-string\\\">'flying'</span> | <span class=\\\"hljs-string\\\">'cloaking'</span> | <span class=\\\"hljs-string\\\">'cloning'</span> | <span class=\\\"hljs-string\\\">'invisibility'</span>;\\n}\\n\",\"title\":\"Model\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@forms/tutorials/6-validation/__tdm-code__.ts\n// module id = tj4F\n// module chunks = 16"],"sourceRoot":"webpack:///"}