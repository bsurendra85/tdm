webpackJsonp([13],{FuK6:function(s,a){s.exports=[{file:"README.md",lang:"md",section:"part1",code:'<p>The renderer we built was simple, just to get us started. Moving forward\nwe need something more capable.</p>\n<p>In this chapter we will refactor the renderer and include support\nfor more types and add custom types.</p>\n<div class="alert">\n  To demonstrate functionality this tutorial will use the\n  <code>@angular/material</code> framework as the core UI framework for forms.\n\n  This should not have an effect, even if you are not familiar with\n  material. \n</div> \n\n<h2 id="adding-a-new-type">Adding a new type</h2>\n<p>A form property metadata includes information about the type of the\nform property.</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Prop</span>({\n  form: {\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n      label: <span class="hljs-string">\'Hero ID\'</span>\n    }\n  }\n})\nid: <span class="hljs-built_in">number</span>;\n</code></pre>\n<p>This is not the TypeScript type, it is the visual type we want this\nproperty to render as.</p>\n<p>The library comes with 5 built-in types, all defined in the\n<code>FormElementType</code> interface:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> FormElementType {\n  text: <span class="hljs-string">\'text\'</span>;\n  <span class="hljs-built_in">boolean</span>: <span class="hljs-string">\'boolean\'</span>;\n  <span class="hljs-built_in">number</span>: <span class="hljs-string">\'number\'</span>;\n  form: <span class="hljs-string">\'form\'</span>;\n  array: <span class="hljs-string">\'array\'</span>;\n}\n</code></pre>\n<p>To add a new type we need to extend the interface or TS will throw.</p>\n<p>Extending is simple, let&#39;s extend with some types we want to implement:</p>\n'},{file:"README.md",lang:"md",section:"part2",code:'<p>Now we can use these literal string values in the <code>type</code> property.</p>\n<div class="info">\n  We have just extended the types for the type system, no runtime changes\n  made. We still need to implement these types in the renderer.\n</div>\n\n<h2 id="custom-metadata">Custom metadata</h2>\n<p>Some components require specific metadata to operate, for example a\n<strong>slider</strong> which requires a range (mix/max) or a <strong>select</strong>\nwhich requires the options to select from.</p>\n<p>This type of information can be sent through the <code>data</code> property.</p>\n<p>Let&#39;s try it with the <strong>slider</strong> component:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Prop</span>({\n  form: {\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n      label: <span class="hljs-string">\'BMI Index\'</span>,\n      data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n    }\n  }\n})\nbmi: <span class="hljs-built_in">number</span>;\n</code></pre>\n<p>The renderer implementation</p>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-slider</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'slider\'"</span>\n            [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n            <span class="hljs-attr">thumbLabel</span>=<span class="hljs-string">"true"</span>\n            [<span class="hljs-attr">tickInterval</span>]=<span class="hljs-string">"1"</span>\n            [<span class="hljs-attr">min</span>]=<span class="hljs-string">"item.data?.min"</span> [<span class="hljs-attr">max</span>]=<span class="hljs-string">"item.data?.max"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-slider</span>&gt;</span>\n</code></pre>\n<p>And now with a <strong>select</strong> component:</p>\n<pre class="lang-ts"><code class="lang-ts"><span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Prop</span>({\n  form: {\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n      label: <span class="hljs-string">\'Super Power\'</span>,\n      data: { options: [\n        { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n        { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n        { value: <span class="hljs-string">\'cloking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n        { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloaning\'</span> },\n        { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n      ]}\n    }\n  }\n})\nsuperPower: <span class="hljs-built_in">string</span>;\n</code></pre>\n<pre class="lang-html"><code class="lang-html"><span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'select\'"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n              [<span class="hljs-attr">placeholder</span>]=<span class="hljs-string">"item.label"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let sel of item.data.options"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"sel.value"</span>&gt;</span>{{sel.label || sel.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n</code></pre>\n<div class="info">\n  Setting up the contract is up to you, data can be any object.\n</div>\n\n<h2 id="better-renderer">Better Renderer</h2>\n<p>Below is the source code for our new, better renderer.  </p>\n<p>Notice that the only change is in the template.</p>\n'},{file:"renderer-v2.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FormGroup, FormArray, FormControl } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/forms\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./renderer-v2.types\'</span>;\n<span class="hljs-keyword">import</span> { RenderInstruction, TDMModelForm, DynamicFormControlRenderer } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'tutorial-renderer-v2\'</span>,\n  templateUrl: <span class="hljs-string">\'./renderer-v2.component.html\'</span>,\n  styleUrls: [<span class="hljs-string">\'./renderer-v2.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> TutorialRendererV2Component <span class="hljs-keyword">implements</span> DynamicFormControlRenderer {\n  item: RenderInstruction;\n  tdmForm: TDMModelForm&lt;<span class="hljs-built_in">any</span>&gt;;\n  fArray: FormArray | <span class="hljs-literal">undefined</span>;\n  fControl: FormControl | <span class="hljs-literal">undefined</span>;\n  fGroup: FormGroup | <span class="hljs-literal">undefined</span>;\n}\n',title:"Better Renderer Class"},{file:"renderer-v2.component.html",lang:"html",section:"default",code:'<span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">"item.type"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'boolean\'"</span>\n                [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>{{ item.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-slide-toggle</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'slideToggle\'"</span>\n                    [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>{{ item.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-slide-toggle</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'slider\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-slider</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n                <span class="hljs-attr">thumbLabel</span>=<span class="hljs-string">"true"</span>\n                [<span class="hljs-attr">tickInterval</span>]=<span class="hljs-string">"1"</span>\n                [<span class="hljs-attr">min</span>]=<span class="hljs-string">"item.data?.min"</span> [<span class="hljs-attr">max</span>]=<span class="hljs-string">"item.data?.max"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-slider</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'radio\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>{{item.label}}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'radio\'"</span>\n                     [<span class="hljs-attr">class.vertical-mat-radio-group</span>]=<span class="hljs-string">"item.data?.vertical"</span>\n                     [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let sel of item.data.options"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"sel.value"</span>&gt;</span>{{sel.label || sel.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">"\'select\'"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n                [<span class="hljs-attr">placeholder</span>]=<span class="hljs-string">"item.label"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">"let sel of item.data.options"</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"sel.value"</span>&gt;</span>{{sel.label || sel.value}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngSwitchDefault</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span>\n           [<span class="hljs-attr">type</span>]=<span class="hljs-string">"item.type"</span>\n           [<span class="hljs-attr">formControl</span>]=<span class="hljs-string">"fControl"</span>\n           [<span class="hljs-attr">placeholder</span>]=<span class="hljs-string">"item.label"</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\n',title:"Better Renderer Template"},{file:"renderer-v2.component.scss",lang:"scss",section:"default",code:'mat-selection-list {\n  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">250px</span>;\n}\n\nmat-radio-group {\n  <span class="hljs-comment">// setting the padding here instead of in the dyn-form-element-container to support ripple animation</span>\n  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">25px</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">flex-direction</span>: row;\n  <span class="hljs-attribute">flex-wrap</span>: wrap;\n\n  mat-radio-<span class="hljs-selector-tag">button</span>:not(<span class="hljs-selector-class">.vertical-mat-radio-group</span>) {\n    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;\n  }\n\n  &amp;<span class="hljs-selector-class">.vertical-mat-radio-group</span> {\n    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>; <span class="hljs-comment">// required in case there\'s a scroll</span>\n    <span class="hljs-attribute">overflow-x</span>: visible;\n    <span class="hljs-attribute">overflow-y</span>: auto;\n    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">200px</span>;\n    <span class="hljs-attribute">display</span>: inline-flex;\n    <span class="hljs-attribute">flex-direction</span>: column;\n    <span class="hljs-attribute">flex-wrap</span>: nowrap;\n  }\n}\n',title:"Better Renderer Style"},{file:"renderer-v2.types.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { FormElementType } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-keyword">declare</span> <span class="hljs-keyword">module</span> \'@tdm/ngx-dynamic-forms/src/interfaces\' {\n  <span class="hljs-keyword">interface</span> FormElementType {\n    radio: <span class="hljs-string">\'radio\'</span>;\n    select: <span class="hljs-string">\'select\'</span>;\n    password: <span class="hljs-string">\'password\'</span>;\n    slider: <span class="hljs-string">\'slider\'</span>;\n    slideToggle: <span class="hljs-string">\'slideToggle\'</span>;\n    textarea: <span class="hljs-string">\'textarea\'</span>;\n  }\n}\n',title:"Better Renderer - Types"},{file:"a-better-renderer.component.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { FORM_CONTROL_COMPONENT } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n<span class="hljs-keyword">import</span> { TutorialRendererV2Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./renderer/renderer-v2.component\'</span>;\n\n<span class="hljs-keyword">import</span> { Hero } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./model\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-a-better-renderer\'</span>,\n  templateUrl: <span class="hljs-string">\'./a-better-renderer.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./a-better-renderer.component.scss\'</span> ],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> ABetterRendererComponent {\n  model = <span class="hljs-keyword">new</span> Hero();\n\n}\n',title:"Component"},{file:"a-better-renderer.component.html",lang:"html",section:"tdmDemo",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>',title:"Template"},{file:"a-better-renderer.component.scss",lang:"scss",section:"default",code:"",title:"Style"},{file:"model.ts",lang:"ts",section:"default",code:'<span class="hljs-keyword">import</span> { Model, Prop } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>({\n  form: <span class="hljs-literal">true</span>\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> Hero {\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n        label: <span class="hljs-string">\'Hero ID\'</span>\n      }\n    }\n  })\n  id: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n        label: <span class="hljs-string">\'Hero Name\'</span>\n      }\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'boolean\'</span>,\n        label: <span class="hljs-string">\'Has Tracking Device\'</span>\n      }\n    }\n  })\n  hasTracking: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'slideToggle\'</span>,\n        label: <span class="hljs-string">\'Double Agent\'</span>\n      }\n    }\n  })\n  doubleAgent: <span class="hljs-built_in">boolean</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'slider\'</span>,\n        label: <span class="hljs-string">\'BMI Index\'</span>,\n        data: { min: <span class="hljs-number">1</span>, max: <span class="hljs-number">35</span> }\n      }\n    }\n  })\n  bmi: <span class="hljs-built_in">number</span>;\n\n  <span class="hljs-meta">@Prop</span>({\n    form: {\n      render: {\n        <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n        label: <span class="hljs-string">\'Super Power\'</span>,\n        data: { options: [\n          { value: <span class="hljs-string">\'selfHealing\'</span>, label: <span class="hljs-string">\'Self Healing\'</span> },\n          { value: <span class="hljs-string">\'flying\'</span>, label: <span class="hljs-string">\'Flying\'</span> },\n          { value: <span class="hljs-string">\'cloaking\'</span>, label: <span class="hljs-string">\'Cloaking\'</span> },\n          { value: <span class="hljs-string">\'cloning\'</span>, label: <span class="hljs-string">\'Cloaning\'</span> },\n          { value: <span class="hljs-string">\'invisibility\'</span>, label: <span class="hljs-string">\'Invisibility\'</span> }\n        ]}\n      }\n    }\n  })\n  superPower: <span class="hljs-string">\'selfHealing\'</span> | <span class="hljs-string">\'flying\'</span> | <span class="hljs-string">\'cloaking\'</span> | <span class="hljs-string">\'cloning\'</span> | <span class="hljs-string">\'invisibility\'</span>;\n}\n',title:"Model"}]}});
//# sourceMappingURL=ABetterRendererComponent.49e0fd3be9277ac2a72b.chunk.js.map