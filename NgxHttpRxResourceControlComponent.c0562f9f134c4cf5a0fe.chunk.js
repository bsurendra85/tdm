webpackJsonp([13],{nMVa:function(s,n){s.exports=[{file:"README.md",lang:"md",section:"default",code:'<h1><a id="rx-resource-control" class="anchor" href="#rx-resource-control"><span class="header-link"></span></a>Rx Resource Control</h1><p>Rx Resource control is a plugin that extends the <code>ResourceControl</code> class and add&#39;s async workflow control tools\nusing RxJS.</p>\n<p>This is a great addition to angular app&#39;s and provides solid integration with angular templates.</p>\n<p>Currently, there are 2 streams:</p>\n<h2><a id="self-" class="anchor" href="#self-"><span class="header-link"></span></a>self$</h2><p>An observable that emits when an <code>ActionSuccess</code> event is triggered.</p>\n<p>This observable does not throw, it will ignore error or cancel events.</p>\n<div class="info">\nThe observable is hot, connected to a <code>BehavioralSubject</code>.\n</div>\n\n<h2><a id="busy-" class="anchor" href="#busy-"><span class="header-link"></span></a>busy$</h2><p>An observable that emits when the value of the <code>busy</code> property when it changes.</p>\n<p>This observable does not throw.</p>\n<p>This is a great utility for UI blocking tasks like spinners, loaders, etc... when using OnPush strategy.</p>\n<div class="info">\nThe observable is hot, connected to a <code>BehavioralSubject</code>.\n</div>\n\n<p>In the following example, we bind the <code>busy$</code> observable using the <code>async</code> pipe.<br>We also add a counter, to count the amount of successful requests.</p>\n',title:"rx-resource-control"},{file:"rx-resource-control.component.ts",lang:"ts",section:"code",code:'resourceControl: ResourceControl&lt;Customer&gt;;\ncount$: Observable&lt;<span class="hljs-built_in">number</span>&gt;;\n  <span class="hljs-keyword">private</span> count: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) {\n  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceControl) {\n    <span class="hljs-keyword">this</span>.resourceControl = Customer.findById(<span class="hljs-string">\'ALFKI\'</span>).$rc;\n    <span class="hljs-keyword">this</span>.count$ = <span class="hljs-keyword">this</span>.resourceControl.self$.pipe(skip(<span class="hljs-number">1</span>), map(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> ++<span class="hljs-keyword">this</span>.count));\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">this</span>.resourceControl.parent.$<span class="hljs-keyword">get</span>();\n  }\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.resourceControl.next();\n}\n',title:"Component"},{file:"rx-resource-control.component.html",lang:"html",section:"code",code:'<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Busy State: {{ resourceControl?.busy$ | async }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Success Count: {{ count$ | async }}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>',title:"Template"}]}});
//# sourceMappingURL=NgxHttpRxResourceControlComponent.c0562f9f134c4cf5a0fe.chunk.js.map