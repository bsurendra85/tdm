webpackJsonp([8],{JXA6:function(s,n){s.exports=[{file:"render-state-event.component.ts",code:'<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { BeforeRenderEventHandler } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-keyword">import</span> { STATES } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../before-render-event\'</span>;\n<span class="hljs-keyword">import</span> { User } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../models\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-render-state-event\'</span>,\n  templateUrl: <span class="hljs-string">\'./render-state-event.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./render-state-event.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> RenderStateEventComponent {\n  model = <span class="hljs-keyword">new</span> User();\n\n  beforeRender($event: BeforeRenderEventHandler): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> addressState = $event.instructions[<span class="hljs-string">\'address.state\'</span>];\n    <span class="hljs-keyword">if</span> (addressState) {\n      <span class="hljs-comment">// ASYNC CALLS THAT BLOCK THE WHOLE FORM FROM RENDERING, GOOD FOR GETTING DATA FROM REMOTE SERVER.</span>\n      <span class="hljs-comment">// E.G.: GETTING GROUPS LISTED UNDER A USER, ETC...</span>\n      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>( <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> setTimeout(r, <span class="hljs-number">1000</span> ))\n        .then( <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          addressState.mergeData({\n            selections: STATES\n          });\n        });\n      <span class="hljs-comment">// mark this field as async, no render until promise completes.</span>\n      $event.async(p);\n\n      addressState.type = <span class="hljs-string">\'radio\'</span>;\n      addressState.mergeData({ vertical: <span class="hljs-literal">true</span> });\n    }\n  }\n}\n',lang:"ts",title:"Component"},{file:"render-state-event.component.html",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"render-state-form-container"</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span>\n                  <span class="hljs-attr">style</span>=<span class="hljs-string">"display: block"</span>\n                  [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>\n                  (<span class="hljs-attr">beforeRender</span>)=<span class="hljs-string">"beforeRender($event)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui-block"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"dynForm?.renderState | async"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-spinner</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-spinner</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>',lang:"html",section:"TDM-DEMO",title:"Template"},{file:"render-state-event.component.scss",code:'<span class="hljs-selector-class">.render-state-form-container</span> {\n  <span class="hljs-attribute">position</span>: relative;\n  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;\n}\n\n<span class="hljs-selector-class">.ui-block</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.15</span>);\n  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">align-items</span>: center;\n  <span class="hljs-attribute">justify-content</span>: center;\n}\n',lang:"scss",title:"Style"},{file:"user.ts",code:'<span class="hljs-keyword">import</span> { Model } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { FormModel, FormProp } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>()\n<span class="hljs-meta">@FormModel</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> User {\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Name\'</span>\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Email Address\'</span>\n    }\n  })\n  email: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    flatten: {\n      street: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'Street\'</span>\n        }\n      },\n      city: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'City\'</span>\n        }\n      },\n      zip: {\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n          label: <span class="hljs-string">\'ZIP\'</span>\n        }\n      },\n      state: {\n        defaultValue: <span class="hljs-string">\'CA\'</span>,\n        render: {\n          label: <span class="hljs-string">\'State\'</span>,\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n          data: {\n            selections: [\n              { value: <span class="hljs-string">\'CA\'</span>, label: <span class="hljs-string">\'California\'</span> },\n              { value: <span class="hljs-string">\'NY\'</span>, label: <span class="hljs-string">\'New York\'</span> },\n              { value: <span class="hljs-string">\'WA\'</span>, label: <span class="hljs-string">\'Washington\'</span> },\n              { value: <span class="hljs-string">\'NJ\'</span>, label: <span class="hljs-string">\'New Jersey\'</span> }\n            ]\n          }\n        }\n      }\n    }\n  })\n  address: {\n    street: <span class="hljs-built_in">string</span>;\n    city: <span class="hljs-built_in">string</span>;\n    zip: <span class="hljs-built_in">number</span>;\n    state: <span class="hljs-string">\'CA\'</span> | <span class="hljs-string">\'NY\'</span> | <span class="hljs-string">\'GA\'</span> | <span class="hljs-string">\'WY\'</span>;\n  };\n}\n',lang:"ts",title:"Model"}]},KAv0:function(s,n){s.exports=[{file:"field-sync-redraw.component.ts",code:'<span class="hljs-keyword">import</span> { Component, ViewChild } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@angular/core\'</span>;\n<span class="hljs-keyword">import</span> { BeforeRenderEventHandler, DynamicFormComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-keyword">import</span> { STATES } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../before-render-event\'</span>;\n<span class="hljs-keyword">import</span> { User } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../models\'</span>;\n\n<span class="hljs-meta">@Component</span>({\n  selector: <span class="hljs-string">\'form-field-sync-redraw\'</span>,\n  templateUrl: <span class="hljs-string">\'./field-sync-redraw.component.html\'</span>,\n  styleUrls: [ <span class="hljs-string">\'./field-sync-redraw.component.scss\'</span> ]\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> FieldSyncRedrawComponent {\n  model = <span class="hljs-keyword">new</span> User();\n\n  stateFieldType: <span class="hljs-string">\'select\'</span> | <span class="hljs-string">\'radio\'</span>;\n\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">\'dynForm\'</span>) dynForm: DynamicFormComponent;\n\n  beforeRender($event: BeforeRenderEventHandler): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> addressState = $event.instructions[<span class="hljs-string">\'address.state\'</span>];\n    <span class="hljs-keyword">if</span> (addressState) {\n      <span class="hljs-comment">// ASYNC CALLS THAT BLOCK THE WHOLE FORM FROM RENDERING, GOOD FOR GETTING DATA FROM REMOTE SERVER.</span>\n      <span class="hljs-comment">// E.G.: GETTING GROUPS LISTED UNDER A USER, ETC...</span>\n      <span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>( <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> setTimeout(r, <span class="hljs-number">1000</span> ))\n        .then( <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          addressState.mergeData({\n            selections: STATES\n          });\n        });\n      <span class="hljs-comment">// mark this field as async, no render until promise completes.</span>\n      $event.async(p);\n\n      <span class="hljs-keyword">if</span> (addressState.data &amp;&amp; addressState.data.selections !== STATES) {\n        <span class="hljs-keyword">this</span>.stateFieldType = addressState.type = <span class="hljs-string">\'select\'</span>;\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-keyword">this</span>.fieldSync();\n      }\n    }\n  }\n\n  fieldSync(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-keyword">const</span> ri = <span class="hljs-keyword">this</span>.dynForm.instructions[<span class="hljs-string">\'address.state\'</span>];\n    <span class="hljs-keyword">if</span> (ri &amp;&amp; <span class="hljs-keyword">this</span>.stateFieldType !== ri.type) {\n      ri.type = <span class="hljs-keyword">this</span>.stateFieldType;\n\n      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.stateFieldType === <span class="hljs-string">\'radio\'</span>) {\n        ri.mergeData({ vertical: <span class="hljs-literal">true</span> });\n      }\n      ri.markAsChanged();\n    }\n  }\n}\n',lang:"ts",title:"Component"},{file:"field-sync-redraw.component.html",code:'  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"custom-form-actions"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"! (dynForm?.renderState | async)"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">"stateFieldType"</span> (<span class="hljs-attr">change</span>)=<span class="hljs-string">"stateFieldType = $event.value"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"select"</span>&gt;</span>Select<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"radio"</span>&gt;</span>Radio Group<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"dynForm.redraw()"</span>&gt;</span>REDRAW<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">"fieldSync()"</span>&gt;</span>FIELD SYNC<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"render-state-form-container"</span> <span class="hljs-attr">ngProjectAs</span>=<span class="hljs-string">"dynamic-form"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-form</span> #<span class="hljs-attr">dynForm</span>\n                  <span class="hljs-attr">style</span>=<span class="hljs-string">"display: block"</span>\n                  [<span class="hljs-attr">model</span>]=<span class="hljs-string">"model"</span>\n                  (<span class="hljs-attr">beforeRender</span>)=<span class="hljs-string">"beforeRender($event)"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-form</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui-block"</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">"dynForm?.renderState | async"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-spinner</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-spinner</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n',lang:"html",title:"Template"},{file:"field-sync-redraw.component.scss",code:'<span class="hljs-selector-class">.render-state-form-container</span> {\n  <span class="hljs-attribute">position</span>: relative;\n  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">300px</span>;\n}\n\n<span class="hljs-selector-class">.ui-block</span> {\n  <span class="hljs-attribute">position</span>: absolute;\n  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;\n  <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.15</span>);\n  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">align-items</span>: center;\n  <span class="hljs-attribute">justify-content</span>: center;\n}\n',lang:"scss",title:"Style"},{file:"user.ts",code:'<span class="hljs-keyword">import</span> { Model } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/core\'</span>;\n<span class="hljs-keyword">import</span> { FormModel, FormProp } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@tdm/ngx-dynamic-forms\'</span>;\n\n<span class="hljs-meta">@Model</span>()\n<span class="hljs-meta">@FormModel</span>()\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> User {\n  <span class="hljs-meta">@FormProp</span>({\n    required: <span class="hljs-literal">true</span>,\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Name\'</span>\n    }\n  })\n  name: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    render: {\n      <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n      label: <span class="hljs-string">\'User Email Address\'</span>\n    }\n  })\n  email: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-meta">@FormProp</span>({\n    flatten: {\n      street: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'Street\'</span>\n        }\n      },\n      city: {\n        required: <span class="hljs-literal">true</span>,\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'text\'</span>,\n          label: <span class="hljs-string">\'City\'</span>\n        }\n      },\n      zip: {\n        render: {\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'number\'</span>,\n          label: <span class="hljs-string">\'ZIP\'</span>\n        }\n      },\n      state: {\n        defaultValue: <span class="hljs-string">\'CA\'</span>,\n        render: {\n          label: <span class="hljs-string">\'State\'</span>,\n          <span class="hljs-keyword">type</span>: <span class="hljs-string">\'select\'</span>,\n          data: {\n            selections: [\n              { value: <span class="hljs-string">\'CA\'</span>, label: <span class="hljs-string">\'California\'</span> },\n              { value: <span class="hljs-string">\'NY\'</span>, label: <span class="hljs-string">\'New York\'</span> },\n              { value: <span class="hljs-string">\'WA\'</span>, label: <span class="hljs-string">\'Washington\'</span> },\n              { value: <span class="hljs-string">\'NJ\'</span>, label: <span class="hljs-string">\'New Jersey\'</span> }\n            ]\n          }\n        }\n      }\n    }\n  })\n  address: {\n    street: <span class="hljs-built_in">string</span>;\n    city: <span class="hljs-built_in">string</span>;\n    zip: <span class="hljs-built_in">number</span>;\n    state: <span class="hljs-string">\'CA\'</span> | <span class="hljs-string">\'NY\'</span> | <span class="hljs-string">\'GA\'</span> | <span class="hljs-string">\'WY\'</span>;\n  };\n}\n',lang:"ts",title:"Model"}]}});
//# sourceMappingURL=FieldSyncRedrawComponent.bb62f883131c339b43e4.chunk.js.map