{"version":3,"sources":["./src/demo/modules/@playground/playground-page/playground-page.component.css?4277","./src/demo/modules/@playground/models/Users/UsersBaseClass.ts","./src/demo/modules/@playground/models/Users/UserConst.ts","./src/demo/modules/@playground/models/Users/UsersInterface.ts","./src/demo/modules/@playground/models/Users/UserDAO.ts","./src/demo/modules/@playground/playground-page/playground-page.component.ts","./src/demo/modules/@playground/routes.ts","./src/demo/modules/@playground/module.ts","./src/demo/modules/@playground/playground-page/playground-page.component.css","./src/demo/modules/@playground/playground-page/playground-page.component.html"],"names":["result","__webpack_require__","module","exports","toString","UsersBaseClass_User_","User_","this","id","prototype","bfRef","console","log","afRef","postDeserializedHandler","resp","options","postHandler","bfQuery","$rc","next","then","coll","length","afQuery","tslib_es6","Object","data","src","alias","method","Get","post","handler","event","action","UserConst_User_","_super","UserBaseClass","endpoint","urlParams","limit","core","UsersInterface","_this","apply","arguments","UsersInterface_1","headers","validation","name","validate","ctx","errorMessage","User_1","pre","a","b","setIdentity","skip","UserConst","UserDAO_UserDAO","UserDAO","bfFindById","afFindById","UserDAO_1","User","playground_page_component_PlaygroundPageComponent","PlaygroundPageComponent","ngDAO","get","findById","user","err","alert","gogo","events$","subscribe","e","type","setTimeout","disconnect","$get","selector","ROUTES","path","component","module_PlaygroundModule","PlaygroundModule","declarations","imports","_shared","router","forChild","undefined","push","i"],"mappings":"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","file":"3.1b25185008cc75e682c2.chunk.js","sourcesContent":["\n        var result = require(\"!!./../../../../../node_modules/css-loader/index.js!./playground-page.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@playground/playground-page/playground-page.component.css\n// module id = 6uXV\n// module chunks = 3","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Interfaces exposed for both static and instance\n *   - Single place for concrete implementation\n *   - Exporting a native class and not const + type\n *   - Should support angular DI\n *\n * Cons:\n *   - Having 2 classes, cumbersome.\n *   - Members defined ONLY IN the exposed implementation (i.e. not part of the private class) will\n *     appear as member on the return type of INSTANCE methods that return \"this\" but WILL NOT\n *     appear on the return type of STATIC methods that return \"this\" - CONFUSING.\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\nexport class User_ implements   BeforeHook<'bfRef', HttpActionOptions>,\n                                AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @BeforeHook('$get')\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @AfterHook('$get')\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: User_.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: User_.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n}\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: { // there are hard coded params\n    limit: '5' // not in path so will go to query string (?param=15)\n  },\n})\n@Injectable()\nexport class UserBaseClass extends ActiveRecord(User_) { }\n\n\n// UserBaseClass.find(2).username__;                                    // OK\n// UserBaseClass.find(2).usernam23e;                                    // SHOULD ERROR\n// UserBaseClass.num;                                                   // OK\n// new UserBaseClass().$get().username__;                           // OK\n// const user: UserBaseClass = new UserBaseClass();                     // OK\n// user.$get().username__;                                          // OK\n// user.$get().abcd;                                                // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                                   // OK\n// user.$rc.next().then( u => u.f34 );                                  // SHOULD ERROR\n// UserBaseClass.query().$rc.next().then(coll => coll );     // OK\n// UserBaseClass.query().$rc.next().then(coll => coll.sdfd );           // SHOULD ERROR\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UsersBaseClass.ts","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Single class, no interface, all in one place\n *   - Single place for concrete implementation\n *   - Can't make mistakes of implementing public API in wrong place.\n *   - Allows inheritance\n *\n * Cons:\n *   - Requires manual type creation (https://github.com/Microsoft/TypeScript/issues/6606)\n *   - For multiple mixins need to create type without ActiveRecord<> help.\n *     https://github.com/Microsoft/TypeScript/issues/13798\n *   - Won't work with angular DI + AOT (https://github.com/angular/angular/issues/14128)\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, ExtendAction, ExecuteContext, IdentityValueType, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: {\n    limit: '5'\n  },\n  skip: true\n})\n@Injectable()\nclass User_ implements  BeforeHook<'bfRef', HttpActionOptions>,\n                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username',\n    validation: {\n      name: 'test-validator',\n      validate(ctx) {\n        return false;\n      },\n      errorMessage(ctx) {\n        return 'validation error';\n      }\n    }\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @Hook({event: 'before', action: '$get'})\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @Hook({event: 'after', action: '$get'})\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: User_.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: User_.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<User_>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<User_>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n  @ExtendAction({\n    pre: (ctx: ExecuteContext<any>, id: IdentityValueType, a:number, b: number, options: HttpActionOptions) => {\n      ctx.setIdentity(id);\n      return options;\n    }\n  })\n  static find: (id: IdentityValueType, a:number, b: number, options?: HttpActionOptions) => ActiveRecord<User_>;\n}\n\nexport const UserConst = ActiveRecord(User_);\nexport type UserConst = ActiveRecord<User_>;\n\n// UserConst.find(2, 3, 4).username__;                              // OK\n// UserConst.find(2, 3, 4).usernam23e;                              // SHOULD ERROR\n// UserConst.num;                                                   // OK\n// new UserConst().$get().username__;                           // OK\n// const user: UserConst = new UserConst();                         // OK\n// user.$get().username__;                                      // OK\n// user.$get().abcd;                                            // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                               // OK\n// user.$rc.next().then( u => u.f34 );                              // SHOULD ERROR\n// UserConst.query().$rc.next().then(coll => coll );     // OK\n// UserConst.query().$rc.next().then(coll => coll.sdfd );           // SHOULD ERROR\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UserConst.ts","/**\n * Model usage example - Interfaces\n *\n * This example demonstrates model creation using 1 concrete class and 2 interfaces.\n * The interfaces provides the structure for both the static and instance shape, the concrete class\n * provides implementation and it is exposed.\n *\n * Pros:\n *   - Design fits I in SOLID\n *   - single concrete implementation\n *   - Exporting a native class and not const + type\n *   - Should support angular DI\n *\n * Cons:\n *   - Double the work, a lot of boilerplate\n *   - Writing interfaces for instance & static, cumbersome\n *   - Members defined ONLY IN the concrete implementation (i.e. not part of the interface) will\n *     appear as member on the return type of INSTANCE methods that return \"this\" but WILL NOT\n *     appear on the return type of STATIC methods that return \"this\" - CONFUSING.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, ARInterface, TDMCollection, Constructor, Prop, Exclude, ExecuteResponse, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n\nexport interface IUserInterfaceStatic extends Constructor<IUserInterface> {\n  bfQuery(this: TDMCollection<ActiveRecord<IUserInterface>>);\n  afQuery(this: TDMCollection<ActiveRecord<IUserInterface>>);\n}\n\nexport interface IUserInterface extends ARInterface<IUserInterface, HttpActionOptions> {\n  id: number;\n  username__: string;\n  _motto_: string;\n\n  rawDeserialized: (options?: HttpActionOptions) => ActiveRecord<IUserInterface>;\n  raw: (options?: HttpActionOptions) => ActiveRecord<IUserInterface>;\n}\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: { // there are hard coded params\n    limit: '5' // not in path so will go to query string (?param=15)\n  },\n  headers: {} // set custom headers for this resource\n  // more... setting the transformer (incoming result to object), security etc...\\\n})\n@Injectable()\nexport class UsersInterface extends ActiveRecord<IUserInterface, IUserInterfaceStatic>()\n                            implements  IUserInterface,\n                                        BeforeHook<'bfRef', HttpActionOptions>,\n                                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n\n  @BeforeHook('$get')\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @AfterHook('$get')\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: UsersInterface.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<UsersInterface>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: UsersInterface.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<UsersInterface>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<UsersInterface>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<UsersInterface>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n}\n\n// UsersInterface.find(2).username__;                                   // OK\n// UsersInterface.find(2).usernam23e;                                   // SHOULD ERROR\n// UsersInterface.num;                                                  // OK\n// new UsersInterface().$get().username__;                          // OK\n// const user: UsersInterface = new UsersInterface();                   // OK\n// user.$get().username__;                                          // OK\n// user.$get().abcd;                                                // SHOULD ERROR\n// user.$rc.next().then( u => u.id );                                   // OK\n// user.$rc.next().then( u => u.f34 );                                  // SHOULD ERROR\n// UsersInterface.query().$rc.next().then( coll => coll );   // OK\n// UsersInterface.query().$rc.next().then( coll => coll.sdfd );         // SHOULD ERROR\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UsersInterface.ts","/**\n * Model usage example - Base class implementation\n *\n * This example demonstrates model creation using 2 concrete classes.\n * A private base class that exposes all of the structure and provides implementation and an exposed empty class.\n * The base class is wrapping an empty class that is used as an export, this class should be left empty.\n *\n * Pros:\n *   - Single class, no interface, all in one place\n *   - Single place for concrete implementation\n *   - Can't make mistakes of implementing public API in wrong place.\n *   - Allows inheritance\n *\n * Cons:\n *   - Requires manual type creation (https://github.com/Microsoft/TypeScript/issues/6606)\n *   - For multiple mixins need to create type without ActiveRecord<> help.\n *     https://github.com/Microsoft/TypeScript/issues/13798\n *   - Won't work with angular DI + AOT (https://github.com/angular/angular/issues/14128)\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { Hook, BeforeHook, AfterHook, TDMCollection, Prop, Exclude, ExecuteResponse, ExtendAction, ExecuteContext, IdentityValueType, Identity } from '@tdm/data';\nimport { ActiveRecord, HttpResource, HttpAction, UrlParam, HttpActionOptions, HttpActionMethodType } from '@tdm/ngx-http-client';\n\n@HttpResource({\n  endpoint: '/api/users/:id?',\n  urlParams: {\n    limit: '5'\n  }\n})\n@Injectable()\nexport class UserDAO implements  BeforeHook<'bfRef', HttpActionOptions>,\n                        AfterHook<'afRef', HttpActionOptions> {\n\n  @Identity()\n  @UrlParam() id: number = 2; // this will go into the \"endpoint\" from the instance!\n\n  @Prop({\n    alias: 'username'\n  })\n  username__: string;\n\n\n  @Prop({\n    alias: 'motto'\n  })\n  @Exclude()\n  _motto_: string;\n\n  constructor() { }\n\n  @Hook({event: 'before', action: '$get'})\n  bfRef() {\n    console.log('BeforeRefresh');\n  }\n\n  @Hook({event: 'after', action: '$get'})\n  afRef() {\n    console.log('AfterRefresh');\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: UserDAO.prototype.postDeserializedHandler\n  })\n  postDeserialized: (options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n  private postDeserializedHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  @HttpAction({\n    method: HttpActionMethodType.Get,\n    post: {\n      handler: UserDAO.prototype.postHandler,\n    }\n  })\n  raw: (options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n  private postHandler(resp: ExecuteResponse, options?: HttpActionOptions) {\n  }\n\n  static num: number;\n\n  @Hook({event: 'before', action: 'query'})\n  static bfQuery(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    this.$rc.next()\n      .then( coll => {\n        console.log(`BeforeQuery-AfterQuery: got ${coll.length}`)\n      });\n    console.log('BeforeQuery');\n  }\n\n  @Hook({event: 'before', action: 'findById'})\n  static bfFindById(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('BeforeFindById');\n  }\n  @Hook({event: 'after', action: 'findById'})\n  static afFindById(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('AfterFindById');\n  }\n\n  @Hook({event: 'after', action: 'query'})\n  static afQuery(this: TDMCollection<ActiveRecord<UserDAO>>) {\n    console.log('AfterQuery');\n    console.log(`AfterQuery: got ${this.length}`)\n  }\n\n  @ExtendAction({\n    pre: (ctx: ExecuteContext<any>, id: IdentityValueType, a:number, b: number, options: HttpActionOptions) => {\n      ctx.setIdentity(id);\n      return options;\n    }\n  })\n  static find: (id: IdentityValueType, a:number, b: number, options?: HttpActionOptions) => ActiveRecord<UserDAO>;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/models/Users/UserDAO.ts","import { Component } from '@angular/core';\nimport { NgDAO } from '@tdm/ngx-http-client';\n\nimport { UserBaseClass, UserConst, UsersInterface, UserDAO } from '../models';\n\nconst User = UserConst;\ntype User = UserConst;\n\n\n\n@Component({\n  selector: 'vehicle-page',\n  styleUrls: [ './playground-page.component.css' ],\n  templateUrl: './playground-page.component.html'\n})\nexport class PlaygroundPageComponent {\n  public user: User;\n\n  constructor(ngDAO: NgDAO) {\n    ngDAO.get(UserDAO).findById(6)\n      .then( user => {\n        console.log(user);\n      }, err => alert(err));\n\n    ngDAO.get(UserDAO).findById(5)\n      .then( user => {\n        console.log(user);\n      }, err => alert(err));\n    // this.user = new User();\n    this.user = User.findById(5);\n\n    // this.user.rawDeserialized({trailingSlashes: 'force'}).$rc.next()\n    //   .then( () => this.user.raw({withCredentials: true}).$rc.next() )\n    //   .then( () => this.gogo());\n\n\n    // this.user.id = 5;\n    // this.user.$get().$rc.next()\n    //   .then(() => {\n    //\n    //   })\n    //   .catch((err) => {\n    //   console.error(err);\n    //   });\n\n\n    // this.gogo();\n\n    // UserConst.query().$rc.next()\n    //   .then( coll => {\n    //   })\n  }\n\n  gogo() {\n\n    let $rc = this.user.$rc;\n    let subs = $rc.events$.subscribe(e => {\n      console.log(e.type);\n      if (e.type === 'ActionError') {\n        console.log(e['error'])\n      } else if (e.type === 'ActionEnd') {\n        setTimeout(() => {\n          this.user.id--;\n          if (this.user.id === 0) {\n            $rc.disconnect();\n          } else {\n            this.user.$get();\n          }\n        }, 500)\n      }\n    });\n\n    this.user.id = 2;\n    this.user.$get();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/playground-page/playground-page.component.ts","import { Routes } from '@angular/router';\n\nimport { PlaygroundPageComponent } from './playground-page';\n\nexport const ROUTES: Routes = [\n  { path: '', component: PlaygroundPageComponent },\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/routes.ts","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from '@shared';\nimport { PlaygroundPageComponent } from './playground-page';\nimport { ROUTES } from './routes';\n\n/**\n * An example of handling non-resource oriented REST API's.\n *\n * @demo core: Identity, ExtendAction, transformNameStrategy, skip\n * @demo angular-http: HttpResource, UrlParam\n */\n@NgModule({\n  declarations: [\n    PlaygroundPageComponent\n  ],\n  imports: [\n    SharedModule,\n\n    RouterModule.forChild(ROUTES)\n  ],\n})\nexport class PlaygroundModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/demo/modules/@playground/module.ts","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/demo/modules/@playground/playground-page/playground-page.component.css\n// module id = i0U9\n// module chunks = 3","module.exports = \"<div class=\\\"page-padding\\\">\\n  <h1>Obs$  : {{ user.$rc.busy$ | async }}</h1>\\n  <h1>Static: {{ user.$rc.busy }}</h1>\\n  <pre>{{user | json}}</pre>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@playground/playground-page/playground-page.component.html\n// module id = xlSY\n// module chunks = 3"],"sourceRoot":"webpack:///"}