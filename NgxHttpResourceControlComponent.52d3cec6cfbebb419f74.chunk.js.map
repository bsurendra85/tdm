{"version":3,"sources":["./src/demo/modules/@http/tutorial/7-resource-control/__tdm-code__.ts"],"names":["module","exports","file","lang","section","code","title"],"mappings":"sCAAAA,EAAAC,UAAmBC,KAAA,YAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,4rGAAioGC,MAAA","file":"NgxHttpResourceControlComponent.52d3cec6cfbebb419f74.chunk.js","sourcesContent":["module.exports = [{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"default\",\"code\":\"<h1><a id=\\\"resource-control\\\" class=\\\"anchor\\\" href=\\\"#resource-control\\\"><span class=\\\"header-link\\\"></span></a>Resource Control</h1><p>A resource represents a domain model with actions. We&#39;ve seen how the\\nDAO allows us to invoke these actions on the resource.</p>\\n<p>Resource, DAO and Actions are all static. It is metadata that we can use\\nto eventually get a resource <strong>instance</strong>.</p>\\n<p>Once an action is fired, some questions pop up:</p>\\n<ul>\\n<li><p>How do we provision the running action?</p>\\n</li>\\n<li><p>how do we manage the instance? things like</p>\\n<ul>\\n<li>The instance state</li>\\n<li>controlling a running action (e.g cancel)</li>\\n<li>and more..</li>\\n</ul>\\n</li>\\n</ul>\\n<p>This is where <code>ResourceControl</code> comes in.</p>\\n<p><code>ResourceControl</code> allow us to control an instance of a resource and to\\nlisten to notification coming from running actions.</p>\\n<p>A single instance of <code>ResourceControl</code> controls a single instance of\\na resource. i.e. for every instance of our model a single resource\\ncontrol is created.</p>\\n<div class=\\\"info\\\">\\nThe <code>ResourceControl</code> class comes from <code>@tdm/data</code> with a limited set\\nof features and a basic event mechanism implementation. \\n<br>\\n<br>\\nPlugins can extend it with additional features, for example\\nthe <strong>rx-resource-control</strong> plugin add&#39;s <strong>RxJS</strong> support to\\n<code>ResourceControl</code> allowing <code>Observable</code> bases event stream, observable\\nstates and more...\\n</div>\\n\\n<h2><a id=\\\"getting-the-resource-control\\\" class=\\\"anchor\\\" href=\\\"#getting-the-resource-control\\\"><span class=\\\"header-link\\\"></span></a>Getting the resource control</h2><p>To get a resource control for a resource instance:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">const</span> promise = <span class=\\\"hljs-keyword\\\">this</span>.ngDAO.get(Customer).findById(<span class=\\\"hljs-string\\\">'ALFKI'</span>);\\n<span class=\\\"hljs-keyword\\\">const</span> rc = ResourceControl.get(promise);\\n\\npromise.then( <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resource</span> =&gt;</span> {\\n <span class=\\\"hljs-comment\\\">// ...</span>\\n});\\n</code></pre>\\n<p>Note that we use the reference to the promise returned from the DAO API\\nas the token to find the resource control.</p>\\n<p><code>ResourceControl.get</code> accepts a promise or the resource instance.\\nThe resource instance is used when working in ActiveRecord mode.</p>\\n<p>Make sure not to send a &quot;chained&quot; promise to <code>ResourceControl.get</code>,\\ndoing so will return <code>undefined</code> as the promise is not recognized.</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">const</span> promise = <span class=\\\"hljs-keyword\\\">this</span>.ngDAO.get(Customer).findById(<span class=\\\"hljs-string\\\">'ALFKI'</span>)\\n.then( <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">resource</span> =&gt;</span> {\\n <span class=\\\"hljs-comment\\\">// ... </span>\\n});\\n<span class=\\\"hljs-keyword\\\">const</span> rc = ResourceControl.get(promise);\\n</code></pre>\\n<p><code>rc</code> is undefined because <code>promise</code> is not the promise returned from\\n<code>findById</code>, it is a chained promise.</p>\\n\",\"title\":\"Resource Control\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@http/tutorial/7-resource-control/__tdm-code__.ts\n// module id = hNZb\n// module chunks = 10"],"sourceRoot":"webpack:///"}