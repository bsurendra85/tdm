{"version":3,"sources":["webpack:///./src/modules/@northwind-app/components/index.ts","webpack:///./src/modules/@northwind-app/components/nortwind-app/northwind-app.component.html","webpack:///./src/modules/@northwind-app/components/nortwind-app/northwind-app.component.scss","webpack:///./src/modules/@northwind-app/components/nortwind-app/northwind-app.component.ts","webpack:///./src/modules/@northwind-app/module.ts","webpack:///./src/modules/@northwind-app/routes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAA+E;;;;;;;;;;;;ACA/E,mLAAmL,KAAK,iEAAiE,cAAc,oIAAoI,kBAAkB,qJ;;;;;;;;;;;ACA7Z,4BAA4B,kBAAkB,2BAA2B,uBAAuB,cAAc,YAAY,aAAa,cAAc,eAAe,EAAE,iBAAiB,oBAAoB,WAAW,YAAY,aAAa,eAAe,EAAE,wBAAwB,yBAAyB,EAAE,UAAU,iBAAiB,gBAAgB,EAAE,qBAAqB,cAAc,mBAAmB,kBAAkB,EAAE,uCAAuC,sBAAsB,+BAA+B,qBAAqB,oBAAoB,EAAE,2BAA2B,iBAAiB,2BAA2B,wBAAwB,EAAE,8BAA8B,mCAAmC,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA7oB;AACb;AAEb;AACW;AAGzD,IAAM,WAAW,GAAG;IAClB,SAAS,EAAE;QACT,KAAK,EAAL;YACE,MAAM,CAAC,uDAAQ,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;QACD,OAAO,EAAE;YACP,YAAY;YACZ,aAAa;YACb,cAAc;YACd,SAAS;SACV;KACF;IACD,SAAS,EAAE;QACT,KAAK,EAAL;YACE,MAAM,CAAC,uDAAQ,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;QACD,OAAO,EAAE;YACP,YAAY;YACZ,WAAW;YACX,UAAU;YACV,OAAO;SACR;KACF;IACD,MAAM,EAAE;QACN,KAAK,EAAL;YACE,MAAM,CAAC,oDAAK,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;QACD,OAAO,EAAE;YACP,SAAS;YACT,WAAW;SACZ;KACF;CACF,CAAC;AAQF;IAOE,+BAAoB,WAA2B,EAAU,MAAc;QAAvE,iBAGC;QAHmB,gBAAW,GAAX,WAAW,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QALvE,eAAU,GAAG,IAAI,2DAAmB,CAAC,EAAE,CAAC,CAAC;QAMvC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ;aAC9B,SAAS,CAAC,gBAAM,IAAI,YAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,EAA7C,CAA6C,CAAE,CAAC;IACzE,CAAC;IAED,gDAAgB,GAAhB,UAAiB,QAAgB;QAC/B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE;gBACjC,UAAU,EAAE,IAAI,CAAC,WAAW;gBAC5B,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YACH,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC;QACT,CAAC;QACD,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,WAAW,CAAC;YACjB,KAAK,QAAQ;gBACX,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;gBAChD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;gBAC7C,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAY,CAAC,CAAC;gBAC/D,KAAK,CAAC;YACR;gBACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,WAAW,CAAE,CAAC,CAAC;gBACtC,KAAK,CAAC;QACV,CAAC;IACH,CAAC;IAED,2CAAW,GAAX;QACE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC;IAxCU,qBAAqB;QANjC,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,aAAa,EAAE,+DAAiB,CAAC,IAAI;;;SAGtC,CAAC;yCAQiC,8DAAc,EAAkB,sDAAM;OAP5D,qBAAqB,CAyCjC;IAAD,4BAAC;CAAA;AAzCiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CO;AACM;AAEO;AAED;AACU;AAS/D;IACE,4BAAY,aAA4B;QACtC,aAAa,CAAC,UAAU,CAAC;YACvB,KAAK,EAAE,QAAQ;YACf,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE;gBACV,UAAU,EAAE,CAAC,wBAAwB,CAAC;aACvC;SACF,CAAC,CAAC;QACH,aAAa,CAAC,UAAU,CAAC;YACvB,KAAK,EAAE,WAAW;YAClB,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE;gBACV,UAAU,EAAE,CAAC,2BAA2B,CAAC;aAC1C;SACF,CAAC,CAAC;QACH,aAAa,CAAC,UAAU,CAAC;YACvB,KAAK,EAAE,WAAW;YAClB,MAAM,EAAE,WAAW;YACnB,UAAU,EAAE;gBACV,UAAU,EAAE,CAAC,2BAA2B,CAAC;aAC1C;SACF,CAAC,CAAC;IACL,CAAC;IAvBU,kBAAkB;QAP9B,8DAAQ,CAAC;YACR,YAAY,EAAE,CAAE,iEAAqB,EAAE,mEAA2B,CAAE;YACpE,OAAO,EAAE;gBACP,oDAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,8CAAM,CAAC;aAC9B;SACF,CAAC;yCAE2B,qDAAa;OAD7B,kBAAkB,CAwB9B;IAAD,yBAAC;CAAA;AAxB8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfsB;AAGb;AACa;AAMrD;IACE,qCAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAC9C,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED,iDAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;IACjC,CAAC;IAPU,2BAA2B;QAJvC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;YAChC,QAAQ,EAAE,iCAAiC;SAC5C,CAAC;yCAEmC,qDAAa;OADrC,2BAA2B,CAQvC;IAAD,kCAAC;CAAA;AARuC;AAUjC,IAAM,MAAM,GAAW;IAC5B;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2BAA2B;QACtC,QAAQ,EAAE;YACR,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,iEAAqB,EAAE;YACjE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,iEAAqB,EAAE;SACxD;KACF;CACF,CAAC","file":"northwind-app.js","sourcesContent":["export { NorthwindAppComponent } from './nortwind-app/northwind-app.component';\n","module.exports = \"<mat-table #table [dataSource]=\\\"dataSource\\\">\\n  <ng-container *ngFor=\\\"let col of columns\\\" [matColumnDef]=\\\"col\\\">\\n    <mat-header-cell *matHeaderCellDef> {{col}} </mat-header-cell>\\n    <mat-cell *matCellDef=\\\"let element\\\">{{element[col]}}</mat-cell>\\n  </ng-container>\\n\\n  <mat-header-row *matHeaderRowDef=\\\"columns\\\"></mat-header-row>\\n  <mat-row *matRowDef=\\\"let row; columns: columns;\\\"\\n           class=\\\"element-row\\\"\\n           matRipple\\n           [cdkDetailRow]=\\\"row\\\" [cdkDetailRowTpl]=\\\"tpl\\\"></mat-row>\\n\\n</mat-table>\\n\"","module.exports = \".tdm-app {\\n  display: flex;\\n  flex-direction: column;\\n  position: absolute;\\n  top: 64px;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  z-index: 1; }\\n\\n.tdm-navbar {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  z-index: 2; }\\n\\n.tdm-navbar .title {\\n    margin-right: 25px; }\\n\\nmain {\\n  height: 100%;\\n  width: 100%; }\\n\\nmain .main-view {\\n    flex: 1;\\n    height: 100%;\\n    width: 100%; }\\n\\nmain .main-view router-outlet + * {\\n      display: flex;\\n      flex-direction: column;\\n      height: 100%;\\n      width: 100%; }\\n\\n.tdm-top-nav-link img {\\n  height: 26px;\\n  vertical-align: middle;\\n  margin: 0 4px 3px 0; }\\n\\n.tdm-top-nav-link.active {\\n  background: rgba(0, 0, 0, 0.1); }\\n\"","import { Component, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { Customer, Employee, Order } from '@shared/client';\nimport { TDMCollection } from '@tdm/core/tdm';\nimport { DataSourceContainer } from '@shared';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs/Subscription';\n\nconst listTypeMap = {\n  customers: {\n    query(): TDMCollection<Customer> {\n      return Customer.query();\n    },\n    columns: [\n      'CustomerID',\n      'ContactName',\n      'ContactTitle',\n      'Country'\n    ]\n  },\n  employees: {\n    query(): TDMCollection<Employee> {\n      return Employee.query();\n    },\n    columns: [\n      'EmployeeID',\n      'FirstName',\n      'LastName',\n      'Title'\n    ]\n  },\n  orders: {\n    query(): TDMCollection<Order> {\n      return Order.query();\n    },\n    columns: [\n      'OrderID',\n      'OrderDate'\n    ]\n  }\n};\n\n@Component({\n  selector: 'northwind-app',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './northwind-app.component.html',\n  styleUrls: [ './northwind-app.component.scss' ]\n})\nexport class NorthwindAppComponent implements OnDestroy {\n  collection: TDMCollection<any>;\n  dataSource = new DataSourceContainer([]);\n  columns: string[];\n  private _subs: Subscription;\n  private listType: 'customers' | 'employees' | 'orders';\n\n  constructor(private activeRoute: ActivatedRoute, private router: Router) {\n    this._subs = activeRoute.paramMap\n      .subscribe(params => this.onListTypeChange(params.get('listType')) );\n  }\n\n  onListTypeChange(listType: string): void {\n    if (!listType) {\n      this.router.navigate(['./orders'], {\n        relativeTo: this.activeRoute,\n        replaceUrl: true\n      });\n      return;\n    }\n    if (this.listType === listType) {\n      return;\n    }\n    switch (listType) {\n      case 'customers':\n      case 'employees':\n      case 'orders':\n        this.listType = listType;\n        this.collection = listTypeMap[listType].query();\n        this.columns = listTypeMap[listType].columns;\n        this.dataSource.updateSource(this.collection.$rc.self$ as any);\n        break;\n      default:\n        this.router.navigate([ '/page-404' ]);\n        break;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._subs.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule, TopNavService } from '@shared';\n\nimport { NorthwindAppComponent } from './components';\nimport { ROUTES, NorthwindAppDomainComponent } from './routes';\n\n@NgModule({\n  declarations: [ NorthwindAppComponent, NorthwindAppDomainComponent ],\n  imports: [\n    SharedModule,\n    RouterModule.forChild(ROUTES)\n  ]\n})\nexport class NorthwindAppModule {\n  constructor(topNavService: TopNavService) {\n    topNavService.addNavItem({\n      title: 'Orders',\n      domain: 'northwind',\n      routerLink: {\n        routerLink: ['./northwind-app/orders']\n      }\n    });\n    topNavService.addNavItem({\n      title: 'Customers',\n      domain: 'northwind',\n      routerLink: {\n        routerLink: ['./northwind-app/customers']\n      }\n    });\n    topNavService.addNavItem({\n      title: 'Employees',\n      domain: 'northwind',\n      routerLink: {\n        routerLink: ['./northwind-app/employees']\n      }\n    });\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { Routes } from '@angular/router';\n\nimport { TopNavService } from '@shared';\nimport { NorthwindAppComponent } from './components';\n\n@Component({\n  selector: 'northwind-app-domain',\n  template: '<router-outlet></router-outlet>'\n})\nexport class NorthwindAppDomainComponent implements OnDestroy {\n  constructor(private topNavService: TopNavService) {\n    topNavService.pushDomain('northwind');\n  }\n\n  ngOnDestroy(): void {\n    this.topNavService.popDomain();\n  }\n}\n\nexport const ROUTES: Routes = [\n  {\n    path: '',\n    component: NorthwindAppDomainComponent,\n    children: [\n      { path: '', pathMatch: 'full', component: NorthwindAppComponent },\n      { path: ':listType', component: NorthwindAppComponent }\n    ]\n  }\n];\n"],"sourceRoot":""}