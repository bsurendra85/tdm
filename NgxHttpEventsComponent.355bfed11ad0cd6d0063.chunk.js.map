{"version":3,"sources":["./src/demo/modules/@http/tutorial/8-events/__tdm-code__.ts"],"names":["module","exports","file","lang","section","code","title"],"mappings":"uCAAAA,EAAAC,UAAmBC,KAAA,YAAAC,KAAA,KAAAC,QAAA,SAAAC,KAAA,ygCAA07BC,MAAA,WAA+KJ,KAAA,YAAAC,KAAA,KAAAC,QAAA,SAAAC,KAAA,ojBAA6kBC,MAAA,WAAmDJ,KAAA,sBAAAC,KAAA,KAAAC,QAAA,OAAAC,KAAA","file":"NgxHttpEventsComponent.355bfed11ad0cd6d0063.chunk.js","sourcesContent":["module.exports = [{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"PART-1\",\"code\":\"<h1><a id=\\\"resource-events\\\" class=\\\"anchor\\\" href=\\\"#resource-events\\\"><span class=\\\"header-link\\\"></span></a>Resource Events</h1><p>The <code>ResourceControl</code> comes with the following events:</p>\\n<ul>\\n<li>ActionStart</li>\\n<li>ActionError</li>\\n<li>ActionSuccess</li>\\n<li>ActionEnd</li>\\n<li>ActionCancel</li>\\n</ul>\\n<p>When no errors, the order of events is:</p>\\n<ul>\\n<li>ActionStart</li>\\n<li>ActionSuccess | ActionSuccess</li>\\n<li>ActionEnd</li>\\n</ul>\\n<p>When an error was thrown:</p>\\n<ul>\\n<li>ActionStart</li>\\n<li>ActionError</li>\\n</ul>\\n<p>Resource events has the following base interface:</p>\\n<pre class=\\\"lang-ts\\\"><code class=\\\"lang-ts\\\"><span class=\\\"hljs-keyword\\\">interface</span> ResourceEvent {\\n  readonly resource: <span class=\\\"hljs-built_in\\\">any</span>;\\n  readonly <span class=\\\"hljs-keyword\\\">type</span>: <span class=\\\"hljs-built_in\\\">string</span>;\\n}\\n</code></pre>\\n<p>Some errors might extend it, for example the <code>ActionError</code> extends it\\nby adding the <strong>error</strong> property.</p>\\n\",\"title\":\"Events\"},{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"PART-2\",\"code\":\"<p>You can use the <code>isResourceEvent</code> function to apply the proper type\\nto the event.</p>\\n<p>The example above will log the entire progress of the action and at\\nthe end it will print the result.</p>\\n<p><code>promise.then( c =&gt; console.log(c) );</code> will log last.</p>\\n<p>We don&#39;t apply a catch statement because we catch the errors within the\\nsubscription.</p>\\n<p>Notice how we <code>unsubscribe</code>, this is similar to <strong>RxJS</strong> but it does\\nnot the <strong>RxJS</strong> library, it&#39;s is just a similar API.</p>\\n\",\"title\":\"Events\"},{\"file\":\"events.component.ts\",\"lang\":\"ts\",\"section\":\"code\",\"code\":\"<span class=\\\"hljs-keyword\\\">constructor</span>(<span class=\\\"hljs-params\\\"><span class=\\\"hljs-keyword\\\">private</span> ngDao: NgDAO</span>) {\\n\\n  <span class=\\\"hljs-keyword\\\">const</span> promise = ngDao.get(Customer).findById(<span class=\\\"hljs-string\\\">'ALFKI'</span>);\\n  <span class=\\\"hljs-keyword\\\">const</span> rc = ResourceControl.get(promise);\\n  <span class=\\\"hljs-keyword\\\">const</span> unsub = rc.events$\\n    .subscribe(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">event</span> =&gt;</span> {\\n      <span class=\\\"hljs-keyword\\\">if</span> (isResourceEvent(<span class=\\\"hljs-string\\\">'ActionError'</span>, event)) {\\n        <span class=\\\"hljs-built_in\\\">console</span>.error(event.error);\\n        unsub.unsubscribe();\\n      } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-built_in\\\">console</span>.log(event.type);\\n      }\\n    });\\n}\\n\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@http/tutorial/8-events/__tdm-code__.ts\n// module id = 0GOe\n// module chunks = 9"],"sourceRoot":"webpack:///"}