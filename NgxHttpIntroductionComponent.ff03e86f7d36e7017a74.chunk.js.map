{"version":3,"sources":["./src/demo/modules/@http/tutorial/1-introduction/__tdm-code__.ts"],"names":["module","exports","file","lang","section","code","title"],"mappings":"sCAAAA,EAAAC,UAAmBC,KAAA,YAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,ipMAAixMH,KAAA,WAAAC,KAAA,KAAAC,QAAA,UAAAC,KAAA,koGAAmuGC,MAAA","file":"NgxHttpIntroductionComponent.ff03e86f7d36e7017a74.chunk.js","sourcesContent":["module.exports = [{\"file\":\"README.md\",\"lang\":\"md\",\"section\":\"default\",\"code\":\"<h1><a id=\\\"tutorial-http-with-tdm\\\" class=\\\"anchor\\\" href=\\\"#tutorial-http-with-tdm\\\"><span class=\\\"header-link\\\"></span></a>Tutorial: HTTP with @tdm</h1><p>HTTP Resource is a bridge between your models and your REST API, using\\nangular&#39;s <code>HttpClient</code>.</p>\\n<p>It is simple and intuitive, applying common conventions so you can start\\nbuilding quickly but also highly <strong>extensible</strong> (via plugins) to cover\\nall of your needs.</p>\\n<p>Some terms:</p>\\n<ul>\\n<li><strong>Model</strong>: A class representing a structure</li>\\n<li><strong>Action</strong>: An HTTP operation that the model supports (a.k.a operation)</li>\\n<li><strong>Adapter</strong>: A logical unit that executes an <strong>Action</strong> on a <strong>Model</strong></li>\\n<li><strong>Resource</strong>: A <strong>Model</strong> bound to an <strong>Adapter</strong> with mapped <strong>Actions</strong>. </li>\\n<li><strong>Resource Control</strong>: An object bound to an instance of a <strong>Resource</strong>\\nthat exists throughout the lifecycle of an <strong>Action</strong>, used for\\ncontrolling the action (notifications, cancel, etc...)</li>\\n</ul>\\n<p>Don&#39;t worry about the terms, we will cover them in-depth later.</p>\\n<h2><a id=\\\"data-access-object\\\" class=\\\"anchor\\\" href=\\\"#data-access-object\\\"><span class=\\\"header-link\\\"></span></a>Data Access Object</h2><p>HTTP Resource implements the <strong>Data Access Object Pattern</strong> (DAO) out of\\nthe box, which allows full control over the model and actions.</p>\\n<p>A data access object is used to invoke actions and also to listen to\\naction notifications and control the resource using the resource control\\nobject.</p>\\n<h2><a id=\\\"active-record\\\" class=\\\"anchor\\\" href=\\\"#active-record\\\"><span class=\\\"header-link\\\"></span></a>Active Record</h2><p><strong>Active Record Pattern</strong> is supported by registering the active record\\nplugin. The active record pattern is less pure, adding to the structure\\nof your model but provides highly usable API, easy to work with and easy\\nto control.</p>\\n<p>Active record, combined with the <strong>rx-resource-control</strong> plugin, provide\\nthe ultimate angular experience.</p>\\n<div class=\\\"info\\\">\\nActive record comes with FULL type support embedded into the model.\\n</div>\\n\\n<h2><a id=\\\"tutorial-structure\\\" class=\\\"anchor\\\" href=\\\"#tutorial-structure\\\"><span class=\\\"header-link\\\"></span></a>Tutorial Structure</h2><p>This tutorial is based on examples, each topic is covered by a relevant\\nexample with source code attached.</p>\\n<p>We will start with the most simple example and climb up to more complex\\nscenarios.</p>\\n<h3><a id=\\\"rest-api-server\\\" class=\\\"anchor\\\" href=\\\"#rest-api-server\\\"><span class=\\\"header-link\\\"></span></a>REST API Server</h3><p>Examples require a REST API which we can preform CRUD operations on.</p>\\n<p>For this, we are using a local server, running <strong>in your browser</strong> as\\na service worker. An express like server.</p>\\n<p>The database we use is also <strong>in browser</strong>, using <strong>localForage</strong> which\\nuses <em>LocalStorage</em>, <em>IndexDB</em> or <em>WebSQL</em> (defaults <em>IndexDB</em>)</p>\\n<p>The domain model for our server is the <strong>Northwind</strong> database.</p>\\n<p>Because the client and the server share the same domain model we are\\nusing interfaces to create a contract between the 2. This is not\\nmandatory and used here for reference.</p>\\n<h3><a id=\\\"the-server-is-code-tdm-code-\\\" class=\\\"anchor\\\" href=\\\"#the-server-is-code-tdm-code-\\\"><span class=\\\"header-link\\\"></span></a>The server is <code>@tdm</code>!</h3><p>The local server, running inside a service worker, is using a <em>@tdm</em>\\npackage called <strong>@tdm/service-mocker</strong>.</p>\\n<p><strong>@tdm/service-mocker</strong> is a package for building class-based\\nmodel/controller server inside service workers using an express like\\nrouting system.</p>\\n<p><strong>@tdm/service-mocker</strong> was built for this demo but it was crafted as\\na package, allowing fully customization and control. It servers as great\\nexample of how to use <strong>@tdm/core</strong> for other use-cases /solutions in\\nthe browser or in node.</p>\\n<p>The concept is not new, you can find express implementation like\\n<a href=\\\"https://github.com/typestack/routing-controllers\\\">routing-controls</a> or\\n<a href=\\\"https://docs.nestjs.com/\\\">nest.js</a> which does the same thing just for\\nexpress.</p>\\n<h3><a id=\\\"the-database-is-code-tdm-code-\\\" class=\\\"anchor\\\" href=\\\"#the-database-is-code-tdm-code-\\\"><span class=\\\"header-link\\\"></span></a>The database is <code>@tdm</code></h3><p>Storing and retrieving data is also done using a <em>tdm</em> package called\\n<strong>@tdm/local-forage</strong> which uses <code>localForage</code> under the hood.</p>\\n<p><strong>@tdm/local-forage</strong> is much like <strong>ngx-http-client</strong> they both serve\\nthe same purpose but for different end points.</p>\\n<p><strong>@tdm/local-forage</strong> was also built for this demo.</p>\\n<blockquote>\\n<p><strong>@tdm/service-mocker</strong> &amp; <strong>@tdm/local-forage</strong> are not covered in\\nthis tutorial. They might get a tutorial of their own in the future.</p>\\n</blockquote>\\n<h3><a id=\\\"sections\\\" class=\\\"anchor\\\" href=\\\"#sections\\\"><span class=\\\"header-link\\\"></span></a>Sections</h3><p>The tutorial is split to 3 sections:</p>\\n<p>Starting with the <strong>Data Access Models</strong>, covering most of the thing\\nrequired for basic use and then move to <strong>Active Record</strong> explaining\\nthe subtle difference in configuration.</p>\\n<p>After that we will explore the various features available, mainly around\\ncustomization of actions, angular integration etc...</p>\\n<p>By the end of the tutorial you will be able to do the following:</p>\\n<ul>\\n<li>Define a model and use it to invoke CRUD operations using the\\nDAO pattern.</li>\\n<li>Extend the built-in actions (<strong>operations</strong>)</li>\\n<li>Create custom HTTP actions.</li>\\n<li>Controlling a Resource<ul>\\n<li>Register to resource event.</li>\\n<li>Cancel a running action</li>\\n<li>and more...        </li>\\n</ul>\\n</li>\\n<li>Register and use the <strong>Active Record</strong> pattern plugin</li>\\n<li>Connect resources to templates and automatically response to events.</li>\\n<li>more...</li>\\n</ul>\\n\"},{\"file\":\"model.ts\",\"lang\":\"ts\",\"section\":\"default\",\"code\":\"<span class=\\\"hljs-keyword\\\">import</span> { Validators } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@angular/forms'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { Model } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@tdm/core'</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { FormModel, FormProp } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@tdm/ngx-dynamic-forms'</span>;\\n\\n<span class=\\\"hljs-meta\\\">@Model</span>()\\n<span class=\\\"hljs-meta\\\">@FormModel</span>()\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">class</span> UIDeveloper {\\n  <span class=\\\"hljs-meta\\\">@FormProp</span>({\\n    required: <span class=\\\"hljs-literal\\\">true</span>,\\n    render: {\\n      vType: <span class=\\\"hljs-string\\\">'text'</span>,\\n      label: <span class=\\\"hljs-string\\\">'Developer Name'</span>\\n    }\\n  })\\n  name: <span class=\\\"hljs-built_in\\\">string</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@FormProp</span>({\\n    required: <span class=\\\"hljs-literal\\\">true</span>,\\n    render: {\\n      vType: <span class=\\\"hljs-string\\\">'number'</span>,\\n      label: <span class=\\\"hljs-string\\\">'Year Of Birth'</span>\\n    },\\n    validators: Validators.compose([Validators.min(<span class=\\\"hljs-number\\\">1900</span>), Validators.max(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-built_in\\\">Date</span>().getFullYear())])\\n  })\\n  yearOfBirth: <span class=\\\"hljs-built_in\\\">number</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@FormProp</span>({\\n    required: <span class=\\\"hljs-literal\\\">true</span>,\\n    render: {\\n      vType: <span class=\\\"hljs-string\\\">'radio'</span>,\\n      label: <span class=\\\"hljs-string\\\">'Gender'</span>,\\n      data: {\\n        options: [\\n          { value: <span class=\\\"hljs-string\\\">'male'</span>, label: <span class=\\\"hljs-string\\\">'MALE'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'female'</span>, label: <span class=\\\"hljs-string\\\">'FEMALE'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'other'</span>, label: <span class=\\\"hljs-string\\\">'OTHER'</span> },\\n        ]\\n      }\\n    }\\n  })\\n  gender: <span class=\\\"hljs-string\\\">'male'</span> | <span class=\\\"hljs-string\\\">'female'</span> | <span class=\\\"hljs-string\\\">'other'</span>;\\n\\n  <span class=\\\"hljs-meta\\\">@FormProp</span>({\\n    render: {\\n      vType: <span class=\\\"hljs-string\\\">'select'</span>,\\n      label: <span class=\\\"hljs-string\\\">'Framework'</span>,\\n      data: {\\n        options: [\\n          { value: <span class=\\\"hljs-string\\\">'angular'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'react'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'vue'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'ember'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'knockout'</span> },\\n          { value: <span class=\\\"hljs-string\\\">'other'</span> }\\n        ]\\n      }\\n    }\\n  })\\n  framework: <span class=\\\"hljs-string\\\">'angular'</span> | <span class=\\\"hljs-string\\\">'react'</span> | <span class=\\\"hljs-string\\\">'vue'</span> | <span class=\\\"hljs-string\\\">'ember'</span> | <span class=\\\"hljs-string\\\">'knockout'</span> | <span class=\\\"hljs-string\\\">'other'</span>;\\n}\\n\",\"title\":\"UI Developer\"}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/modules/@http/tutorial/1-introduction/__tdm-code__.ts\n// module id = lTar\n// module chunks = 12"],"sourceRoot":"webpack:///"}